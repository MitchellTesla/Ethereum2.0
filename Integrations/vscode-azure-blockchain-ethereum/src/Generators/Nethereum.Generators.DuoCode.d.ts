/*!
* Type definitions for Nethereum.Generators.DuoCode, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
*
* Generated by DuoCode Compiler 3.0.1654.0 [Trial]
*/

/// <reference path="./mscorlib.d.ts" />

declare module Nethereum {
    module Generators {
        // Nethereum.Generators.ContractProjectGenerator
        export interface ContractProjectGenerator extends System.Object {
            get_ContractABI(): Model.ContractABI;
            get_ContractName(): string;
            get_ByteCode(): string;
            get_BaseNamespace(): string;
            get_ServiceNamespace(): string;
            get_CQSNamespace(): string;
            get_DTONamespace(): string;
            get_BaseOutputPath(): string;
            get_PathDelimiter(): string;
            get_CodeGenLanguage(): Core.CodeGenLanguage;
            GenerateAllMessagesFileAndService(): Core.GeneratedFile[];
            GenerateAllMessages(): Core.GeneratedFile;
            GenerateAll(): Core.GeneratedFile[];
            GenerateService(singleMessagesFile?: boolean): Core.GeneratedFile;
            GenerateAllCQSMessages(): System.Collections.Generic.List$1<Core.GeneratedFile>;
            GenerateAllFunctionDTOs(): System.Collections.Generic.List$1<Core.GeneratedFile>;
            GetAllFunctionDTOsGenerators(): System.Collections.Generic.List$1<DTOs.FunctionOutputDTOGenerator>;
            GenerateAllEventDTOs(): System.Collections.Generic.List$1<Core.GeneratedFile>;
            GetllEventDTOGenerators(): System.Collections.Generic.List$1<DTOs.EventDTOGenerator>;
            GeneratCQSFunctionMessages(): System.Collections.Generic.List$1<Core.GeneratedFile>;
            GetAllCQSFunctionMessageGenerators(): System.Collections.Generic.List$1<CQS.FunctionCQSMessageGenerator>;
            get_AddRootNamespaceOnVbProjectsToImportStatements(): boolean;
            set_AddRootNamespaceOnVbProjectsToImportStatements(value: boolean): void;
            GetCQSMessageDeploymentGenerator(): CQS.ContractDeploymentCQSMessageGenerator;
            GeneratCQSMessageDeployment(): Core.GeneratedFile;
            GetFullNamespace(namespace: string): string;
            GetFullPath(namespace: string): string;
        }
        export interface ContractProjectGeneratorTypeFunc extends TypeFunction {
            (): ContractProjectGeneratorTypeFunc;
            prototype: ContractProjectGenerator;
            new (contractABI: Model.ContractABI, contractName: string, byteCode: string, baseNamespace: string, serviceNamespace: string, cqsNamespace: string, dtoNamespace: string, baseOutputPath: string, pathDelimiter: string, codeGenLanguage: Core.CodeGenLanguage): ContractProjectGenerator;
            ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string, baseNamespace: string, serviceNamespace: string, cqsNamespace: string, dtoNamespace: string, baseOutputPath: string, pathDelimiter: string, codeGenLanguage: Core.CodeGenLanguage): ContractProjectGenerator; };
        }
        const ContractProjectGenerator: ContractProjectGeneratorTypeFunc;

        // Nethereum.Generators.NetStandardLibraryGenerator
        export interface NetStandardLibraryGenerator extends System.Object {
            get_ProjectFileName(): string;
            get_CodeGenLanguage(): Core.CodeGenLanguage;
            GenerateFileContent(outputPath: string): Core.GeneratedFile;
            get_NethereumWeb3Version(): string;
            set_NethereumWeb3Version(value: string): void;
        }
        export interface NetStandardLibraryGeneratorTypeFunc extends TypeFunction {
            (): NetStandardLibraryGeneratorTypeFunc;
            prototype: NetStandardLibraryGenerator;
            new (projectFileName: string, codeGenLanguage: Core.CodeGenLanguage): NetStandardLibraryGenerator;
            ctor: { new (projectFileName: string, codeGenLanguage: Core.CodeGenLanguage): NetStandardLibraryGenerator; };
        }
        const NetStandardLibraryGenerator: NetStandardLibraryGeneratorTypeFunc;
        module Core {
            // Nethereum.Generators.Core.FunctionABIModel
            export interface FunctionABIModel extends System.Object {
                get_FunctionABI(): Model.FunctionABI;
                GetSingleOutputReturnType(): string;
                GetSingleAbiReturnType(): string;
                IsMultipleOutput(): boolean;
                IsSingleOutput(): boolean;
                HasNoInputParameters(): boolean;
                HasNoReturn(): boolean;
                IsTransaction(): boolean;
            }
            export interface FunctionABIModelTypeFunc extends TypeFunction {
                (): FunctionABIModelTypeFunc;
                prototype: FunctionABIModel;
                new (functionABI: Model.FunctionABI, abiTypeToDotnetTypeConvertor: ITypeConvertor): FunctionABIModel;
                ctor: { new (functionABI: Model.FunctionABI, abiTypeToDotnetTypeConvertor: ITypeConvertor): FunctionABIModel; };
            }
            const FunctionABIModel: FunctionABIModelTypeFunc;

            // Nethereum.Generators.Core.ParameterABIModel
            export interface ParameterABIModel extends ParameterModel$1<Model.ParameterABI> {
                GetPropertyName$1(parameterDirection: ParameterDirection): string;
                GetVariableName$1(name: string, order: int): string;
                GetPropertyName$2(name: string, order: int, parameterDirection?: ParameterDirection): string;
            }
            export interface ParameterABIModelTypeFunc extends TypeFunction {
                (): ParameterABIModelTypeFunc;
                prototype: ParameterABIModel;
                AnonymousInputParameterPrefix: string;
                AnonymousOutputParameterPrefix: string;
                ctor$1: { new (parameter: Model.ParameterABI): ParameterABIModel; };
                new (): ParameterABIModel;
                ctor: { new (): ParameterABIModel; };
            }
            const ParameterABIModel: ParameterABIModelTypeFunc;

            // Nethereum.Generators.Core.ParameterABIModelTypeMap
            export interface ParameterABIModelTypeMap extends System.Object {
                GetParameterDotNetOutputMapType(parameter: Model.ParameterABI): string;
                GetParameterDotNetInputMapType(parameter: Model.ParameterABI): string;
            }
            export interface ParameterABIModelTypeMapTypeFunc extends TypeFunction {
                (): ParameterABIModelTypeMapTypeFunc;
                prototype: ParameterABIModelTypeMap;
                new (typeConvertor: ITypeConvertor): ParameterABIModelTypeMap;
                ctor: { new (typeConvertor: ITypeConvertor): ParameterABIModelTypeMap; };
            }
            const ParameterABIModelTypeMap: ParameterABIModelTypeMapTypeFunc;

            // Nethereum.Generators.Core.ABITypeToCSharpType
            export interface ABITypeToCSharpType extends ABITypeToDotNetTypeBase, ITypeConvertor {
            }
            export interface ABITypeToCSharpTypeTypeFunc extends TypeFunction {
                (): ABITypeToCSharpTypeTypeFunc;
                prototype: ABITypeToCSharpType;
                new (): ABITypeToCSharpType;
                ctor: { new (): ABITypeToCSharpType; };
            }
            const ABITypeToCSharpType: ABITypeToCSharpTypeTypeFunc;

            // Nethereum.Generators.Core.ABITypeToDotNetTypeBase
            export interface ABITypeToDotNetTypeBase extends System.Object, ITypeConvertor {
                Convert(typeName: string, outputArrayAsList?: boolean): string;
            }
            export interface ABITypeToDotNetTypeBaseTypeFunc extends TypeFunction {
                (): ABITypeToDotNetTypeBaseTypeFunc;
                prototype: ABITypeToDotNetTypeBase;
            }
            const ABITypeToDotNetTypeBase: ABITypeToDotNetTypeBaseTypeFunc;

            // Nethereum.Generators.Core.ABITypeToFSharpType
            export interface ABITypeToFSharpType extends ABITypeToDotNetTypeBase, ITypeConvertor {
            }
            export interface ABITypeToFSharpTypeTypeFunc extends TypeFunction {
                (): ABITypeToFSharpTypeTypeFunc;
                prototype: ABITypeToFSharpType;
                new (): ABITypeToFSharpType;
                ctor: { new (): ABITypeToFSharpType; };
            }
            const ABITypeToFSharpType: ABITypeToFSharpTypeTypeFunc;

            // Nethereum.Generators.Core.ABITypeToVBType
            export interface ABITypeToVBType extends ABITypeToDotNetTypeBase, ITypeConvertor {
            }
            export interface ABITypeToVBTypeTypeFunc extends TypeFunction {
                (): ABITypeToVBTypeTypeFunc;
                prototype: ABITypeToVBType;
                new (): ABITypeToVBType;
                ctor: { new (): ABITypeToVBType; };
            }
            const ABITypeToVBType: ABITypeToVBTypeTypeFunc;

            // Nethereum.Generators.Core.ClassGeneratorBase<TClassTemplate, TClassModel>
            export interface ClassGeneratorBase$2<TClassTemplate, TClassModel> extends System.Object, IFileGenerator, IGenerator, IClassGenerator {
                GenerateFileContent$1(outputPath: string): GeneratedFile;
                GenerateFileContent(): string;
                GetFileName(): string;
                GenerateClass(): string;
            }
            export interface ClassGeneratorBase$2TypeFunc<TClassTemplate, TClassModel> extends TypeFunction {
                (): ClassGeneratorBase$2TypeFunc<TClassTemplate, TClassModel>;
                prototype: ClassGeneratorBase$2<TClassTemplate, TClassModel>;
                new (): ClassGeneratorBase$2<TClassTemplate, TClassModel>;
                ctor: { new (): ClassGeneratorBase$2<TClassTemplate, TClassModel>; };
            }
            export function ClassGeneratorBase$2<TClassTemplate, TClassModel>(TClassTemplate: TypeArg<TClassTemplate>, TClassModel: TypeArg<TClassModel>): ClassGeneratorBase$2TypeFunc<TClassTemplate, TClassModel>;

            // Nethereum.Generators.Core.CodeGenLanguage
            export enum CodeGenLanguage {
                CSharp = 0,
                Vb = 1,
                Proto = 2,
                FSharp = 3
            }

            // Nethereum.Generators.Core.CodeGenLanguageExt
            export interface CodeGenLanguageExtTypeFunc extends TypeFunction {
                (): CodeGenLanguageExtTypeFunc;
                ProjectFileExtensions: System.Collections.Generic.Dictionary$2<CodeGenLanguage, string>;
                LanguageMappings: System.Collections.Generic.Dictionary$2<string, CodeGenLanguage>;
                DotNetCliLanguage: System.Collections.Generic.Dictionary$2<CodeGenLanguage, string>;
                GetValidProjectFileExtensions(): System.Collections.Generic.IEnumerable$1<string>;
                ParseLanguage(languageTag: string): CodeGenLanguage;
                ToDotNetCli(language: CodeGenLanguage): string;
                AddProjectFileExtension(language: CodeGenLanguage, projectFileName: string): string;
                GetCodeGenLanguageFromProjectFile(projectFilePath: string): CodeGenLanguage;
                GetCodeOutputFileExtension(codeGenLanguage: CodeGenLanguage): string;
                StringComparerIgnoreCase: CodeGenLanguageExt.StringComparerIgnoreCaseTypeFunc;
            }
            const CodeGenLanguageExt: CodeGenLanguageExtTypeFunc;

            // Nethereum.Generators.Core.CommonGenerators
            export interface CommonGenerators extends System.Object {
                GenerateVariableName(value: string): string;
                GeneratePropertyName(value: string): string;
                GenerateClassName(value: string): string;
            }
            export interface CommonGeneratorsTypeFunc extends TypeFunction {
                (): CommonGeneratorsTypeFunc;
                prototype: CommonGenerators;
                new (): CommonGenerators;
                ctor: { new (): CommonGenerators; };
            }
            const CommonGenerators: CommonGeneratorsTypeFunc;

            // Nethereum.Generators.Core.FileModel
            export interface FileModel extends System.Object, IFileModel {
                get_Name(): string;
                get_CodeGenLanguage(): CodeGenLanguage;
                set_CodeGenLanguage(value: CodeGenLanguage): void;
                GetFileName(): string;
                get_Namespace(): string;
                get_NamespaceDependencies(): System.Collections.Generic.List$1<string>;
            }
            export interface FileModelTypeFunc extends TypeFunction {
                (): FileModelTypeFunc;
                prototype: FileModel;
                new (namespace: string, name: string): FileModel;
                ctor: { new (namespace: string, name: string): FileModel; };
            }
            const FileModel: FileModelTypeFunc;

            // Nethereum.Generators.Core.GeneratedFile
            export interface GeneratedFile extends System.Object {
                get_GeneratedCode(): string;
                get_FileName(): string;
                get_OutputFolder(): string;
            }
            export interface GeneratedFileTypeFunc extends TypeFunction {
                (): GeneratedFileTypeFunc;
                prototype: GeneratedFile;
                new (generatedCode: string, fileName: string, outputFolder: string): GeneratedFile;
                ctor: { new (generatedCode: string, fileName: string, outputFolder: string): GeneratedFile; };
            }
            const GeneratedFile: GeneratedFileTypeFunc;

            // Nethereum.Generators.Core.IClassGenerator
            export interface IClassGenerator {
                Nethereum$Generators$Core$IClassGenerator$GenerateClass(): string;
            }
            const IClassGenerator: TypeFunction;

            // Nethereum.Generators.Core.IClassModel
            export interface IClassModel extends IFileModel {
                Nethereum$Generators$Core$IClassModel$GetTypeName(): string;
                Nethereum$Generators$Core$IClassModel$GetVariableName(): string;
            }
            const IClassModel: TypeFunction;

            // Nethereum.Generators.Core.IFileModel
            export interface IFileModel {
                Nethereum$Generators$Core$IFileModel$GetFileName(): string;
                Nethereum$Generators$Core$IFileModel$get_Namespace(): string;
                Nethereum$Generators$Core$IFileModel$get_NamespaceDependencies(): System.Collections.Generic.List$1<string>;
            }
            const IFileModel: TypeFunction;

            // Nethereum.Generators.Core.IClassTemplate
            export interface IClassTemplate {
                Nethereum$Generators$Core$IClassTemplate$GenerateClass(): string;
                Nethereum$Generators$Core$IClassTemplate$GenerateFullClass(): string;
            }
            const IClassTemplate: TypeFunction;

            // Nethereum.Generators.Core.IFileGenerator
            export interface IFileGenerator extends IGenerator {
                Nethereum$Generators$Core$IFileGenerator$GenerateFileContent$1(outputPath: string): GeneratedFile;
                Nethereum$Generators$Core$IFileGenerator$GenerateFileContent(): string;
                Nethereum$Generators$Core$IFileGenerator$GetFileName(): string;
            }
            const IFileGenerator: TypeFunction;

            // Nethereum.Generators.Core.IGenerator
            export interface IGenerator {
                Nethereum$Generators$Core$IGenerator$GenerateClass(): string;
            }
            const IGenerator: TypeFunction;

            // Nethereum.Generators.Core.IMessage<TParameter>
            export interface IMessage$1<TParameter> {
                Nethereum$Generators$Core$IMessage$1$get_InputParameters(): TParameter[];
                Nethereum$Generators$Core$IMessage$1$get_Name(): string;
                Nethereum$Generators$Core$IMessage$1$set_Name(value: string): void;
            }
            export function IMessage$1<TParameter>(TParameter: TypeArg<TParameter>): TypeFunction;

            // Nethereum.Generators.Core.ITypeConvertor
            export interface ITypeConvertor {
                Nethereum$Generators$Core$ITypeConvertor$Convert(typeName: string, outputArrayAsList?: boolean): string;
            }
            const ITypeConvertor: TypeFunction;

            // Nethereum.Generators.Core.IWFGenerator
            export interface IWFGenerator {
                Nethereum$Generators$Core$IWFGenerator$GenerateWorkflow(): string;
            }
            const IWFGenerator: TypeFunction;

            // Nethereum.Generators.Core.IWorkflowFileGenerator
            export interface IWorkflowFileGenerator extends IWFGenerator {
                Nethereum$Generators$Core$IWorkflowFileGenerator$GenerateFileContent$1(outputPath: string): GeneratedFile;
                Nethereum$Generators$Core$IWorkflowFileGenerator$GenerateFileContent(): string;
                Nethereum$Generators$Core$IWorkflowFileGenerator$GetFileName(): string;
            }
            const IWorkflowFileGenerator: TypeFunction;

            // Nethereum.Generators.Core.IWorkflowGenerator
            export interface IWorkflowGenerator {
                Nethereum$Generators$Core$IWorkflowGenerator$GenerateWorkflow(): string;
            }
            const IWorkflowGenerator: TypeFunction;

            // Nethereum.Generators.Core.IWorkflowModel
            export interface IWorkflowModel extends IFileModel {
                Nethereum$Generators$Core$IWorkflowModel$GetTypeName(): string;
                Nethereum$Generators$Core$IWorkflowModel$GetVariableName(): string;
            }
            const IWorkflowModel: TypeFunction;

            // Nethereum.Generators.Core.IWorkflowTemplate
            export interface IWorkflowTemplate {
                Nethereum$Generators$Core$IWorkflowTemplate$GenerateWorkflow(): string;
                Nethereum$Generators$Core$IWorkflowTemplate$GenerateFullWorkflow(): string;
            }
            const IWorkflowTemplate: TypeFunction;

            // Nethereum.Generators.Core.JavascriptEscapeUtility
            export interface JavascriptEscapeUtilityTypeFunc extends TypeFunction {
                (): JavascriptEscapeUtilityTypeFunc;
                JavaScriptEscape(text: string): string;
            }
            const JavascriptEscapeUtility: JavascriptEscapeUtilityTypeFunc;

            // Nethereum.Generators.Core.LogicAppWorkflowFileTemplate
            export interface LogicAppWorkflowFileTemplate extends WorkflowFileTemplate {
            }
            export interface LogicAppWorkflowFileTemplateTypeFunc extends TypeFunction {
                (): LogicAppWorkflowFileTemplateTypeFunc;
                prototype: LogicAppWorkflowFileTemplate;
                new (workflowModel: IWorkflowModel, workflowTemplate: IWorkflowTemplate): LogicAppWorkflowFileTemplate;
                ctor: { new (workflowModel: IWorkflowModel, workflowTemplate: IWorkflowTemplate): LogicAppWorkflowFileTemplate; };
            }
            const LogicAppWorkflowFileTemplate: LogicAppWorkflowFileTemplateTypeFunc;

            // Nethereum.Generators.Core.MessageMap<MFrom, MTo, PFrom, PTo>
            export interface MessageMap$4<MFrom, MTo, PFrom, PTo> extends System.Object {
                get_From(): MFrom;
                set_From(value: MFrom): void;
                get_To(): MTo;
                set_To(value: MTo): void;
                get_ParameterMaps(): System.Collections.Generic.List$1<ParameterMap$2<PFrom, PTo>>;
                set_ParameterMaps(value: System.Collections.Generic.List$1<ParameterMap$2<PFrom, PTo>>): void;
            }
            export interface MessageMap$4TypeFunc<MFrom, MTo, PFrom, PTo> extends TypeFunction {
                (): MessageMap$4TypeFunc<MFrom, MTo, PFrom, PTo>;
                prototype: MessageMap$4<MFrom, MTo, PFrom, PTo>;
                new (from: MFrom, to: MTo, parameterMaps: System.Collections.Generic.List$1<ParameterMap$2<PFrom, PTo>>): MessageMap$4<MFrom, MTo, PFrom, PTo>;
                ctor: { new (from: MFrom, to: MTo, parameterMaps: System.Collections.Generic.List$1<ParameterMap$2<PFrom, PTo>>): MessageMap$4<MFrom, MTo, PFrom, PTo>; };
            }
            export function MessageMap$4<MFrom, MTo, PFrom, PTo>(MFrom: TypeArg<MFrom>, MTo: TypeArg<MTo>, PFrom: TypeArg<PFrom>, PTo: TypeArg<PTo>): MessageMap$4TypeFunc<MFrom, MTo, PFrom, PTo>;

            // Nethereum.Generators.Core.MessagingType
            export enum MessagingType {
                EventGrid = 0,
                ServiceBus = 1
            }

            // Nethereum.Generators.Core.MultipleClassGeneratorBase<TMultipleClassFileTemplate, TMultipleClassFileModel>
            export interface MultipleClassGeneratorBase$2<TMultipleClassFileTemplate, TMultipleClassFileModel> extends System.Object, IFileGenerator, IGenerator {
                GenerateFileContent$1(outputPath: string): GeneratedFile;
                GenerateFileContent(): string;
                GetFileName(): string;
                GenerateClass(): string;
            }
            export interface MultipleClassGeneratorBase$2TypeFunc<TMultipleClassFileTemplate, TMultipleClassFileModel> extends TypeFunction {
                (): MultipleClassGeneratorBase$2TypeFunc<TMultipleClassFileTemplate, TMultipleClassFileModel>;
                prototype: MultipleClassGeneratorBase$2<TMultipleClassFileTemplate, TMultipleClassFileModel>;
                new (): MultipleClassGeneratorBase$2<TMultipleClassFileTemplate, TMultipleClassFileModel>;
                ctor: { new (): MultipleClassGeneratorBase$2<TMultipleClassFileTemplate, TMultipleClassFileModel>; };
            }
            export function MultipleClassGeneratorBase$2<TMultipleClassFileTemplate, TMultipleClassFileModel>(TMultipleClassFileTemplate: TypeArg<TMultipleClassFileTemplate>, TMultipleClassFileModel: TypeArg<TMultipleClassFileModel>): MultipleClassGeneratorBase$2TypeFunc<TMultipleClassFileTemplate, TMultipleClassFileModel>;

            // Nethereum.Generators.Core.Parameter
            export interface Parameter extends System.Object {
                get_Name(): string;
                get_Type(): string;
                get_Order(): int;
            }
            export interface ParameterTypeFunc extends TypeFunction {
                (): ParameterTypeFunc;
                prototype: Parameter;
                new (name: string, type: string, order: int): Parameter;
                ctor: { new (name: string, type: string, order: int): Parameter; };
            }
            const Parameter: ParameterTypeFunc;

            // Nethereum.Generators.Core.ParameterDirection
            export enum ParameterDirection {
                Input = 0,
                Output = 1
            }

            // Nethereum.Generators.Core.ParameterMap<T1, T2>
            export interface ParameterMap$2<T1, T2> extends System.Object {
                get_From(): T1;
                set_From(value: T1): void;
                get_To(): T2;
                set_To(value: T2): void;
            }
            export interface ParameterMap$2TypeFunc<T1, T2> extends TypeFunction {
                (): ParameterMap$2TypeFunc<T1, T2>;
                prototype: ParameterMap$2<T1, T2>;
                new (from: T1, to: T2): ParameterMap$2<T1, T2>;
                ctor: { new (from: T1, to: T2): ParameterMap$2<T1, T2>; };
            }
            export function ParameterMap$2<T1, T2>(T1: TypeArg<T1>, T2: TypeArg<T2>): ParameterMap$2TypeFunc<T1, T2>;

            // Nethereum.Generators.Core.ParameterMapperAssignerCSharpTemplate<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>
            export interface ParameterMapperAssignerCSharpTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo> extends ParameterMapperAssignerTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo> {
            }
            export interface ParameterMapperAssignerCSharpTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo> extends TypeFunction {
                (): ParameterMapperAssignerCSharpTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                prototype: ParameterMapperAssignerCSharpTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                new (): ParameterMapperAssignerCSharpTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                ctor: { new (): ParameterMapperAssignerCSharpTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>; };
            }
            export function ParameterMapperAssignerCSharpTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>(TParameterModelFrom: TypeArg<TParameterModelFrom>, TParameterModelTo: TypeArg<TParameterModelTo>, TParameterFrom: TypeArg<TParameterFrom>, TParameterTo: TypeArg<TParameterTo>): ParameterMapperAssignerCSharpTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;

            // Nethereum.Generators.Core.ParameterMapperAssignerTemplate<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>
            export interface ParameterMapperAssignerTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo> extends System.Object {
                GenerateMappingAssigment$1(map: ParameterMap$2<TParameterFrom, TParameterTo>, variableSourceName: string, destinationVariableName: string): string;
                GenerateMappingAssigment(map: ParameterMap$2<TParameterFrom, TParameterTo>, variableSourceName: string): string;
                GenerateMappingsReturn$1(map: ParameterMap$2<TParameterFrom, TParameterTo>, variableSourceName: string, destinationVariableName: string): string;
                GenerateMappingsReturn(map: ParameterMap$2<TParameterFrom, TParameterTo>, variableSourceName: string): string;
            }
            export interface ParameterMapperAssignerTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo> extends TypeFunction {
                (): ParameterMapperAssignerTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                prototype: ParameterMapperAssignerTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                new (): ParameterMapperAssignerTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                ctor: { new (): ParameterMapperAssignerTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>; };
            }
            export function ParameterMapperAssignerTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>(TParameterModelFrom: TypeArg<TParameterModelFrom>, TParameterModelTo: TypeArg<TParameterModelTo>, TParameterFrom: TypeArg<TParameterFrom>, TParameterTo: TypeArg<TParameterTo>): ParameterMapperAssignerTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;

            // Nethereum.Generators.Core.ParameterMapperAssignerVbTemplate<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>
            export interface ParameterMapperAssignerVbTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo> extends ParameterMapperAssignerTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo> {
            }
            export interface ParameterMapperAssignerVbTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo> extends TypeFunction {
                (): ParameterMapperAssignerVbTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                prototype: ParameterMapperAssignerVbTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                new (): ParameterMapperAssignerVbTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;
                ctor: { new (): ParameterMapperAssignerVbTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>; };
            }
            export function ParameterMapperAssignerVbTemplate$4<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>(TParameterModelFrom: TypeArg<TParameterModelFrom>, TParameterModelTo: TypeArg<TParameterModelTo>, TParameterFrom: TypeArg<TParameterFrom>, TParameterTo: TypeArg<TParameterTo>): ParameterMapperAssignerVbTemplate$4TypeFunc<TParameterModelFrom, TParameterModelTo, TParameterFrom, TParameterTo>;

            // Nethereum.Generators.Core.ParameterModel<TParameter>
            export interface ParameterModel$1<TParameter> extends System.Object {
                get_Parameter(): TParameter;
                set_Parameter(value: TParameter): void;
                GetVariableName(): string;
                GetPropertyName(): string;
            }
            export interface ParameterModel$1TypeFunc<TParameter> extends TypeFunction {
                (): ParameterModel$1TypeFunc<TParameter>;
                prototype: ParameterModel$1<TParameter>;
                new (): ParameterModel$1<TParameter>;
                ctor: { new (): ParameterModel$1<TParameter>; };
                ctor$1: { new (parameter: TParameter): ParameterModel$1<TParameter>; };
            }
            export function ParameterModel$1<TParameter>(TParameter: TypeArg<TParameter>): ParameterModel$1TypeFunc<TParameter>;

            // Nethereum.Generators.Core.ServiceType
            export enum ServiceType {
                Flow = 0,
                LogicApp = 1,
                Function = 2
            }

            // Nethereum.Generators.Core.SpaceUtils
            export interface SpaceUtils extends System.Object {
            }
            export interface SpaceUtilsTypeFunc extends TypeFunction {
                (): SpaceUtilsTypeFunc;
                prototype: SpaceUtils;
                NoTabs: string;
                OneTab: string;
                TwoTabs: string;
                ThreeTabs: string;
                FourTabs: string;
                FiveTabs: string;
                new (): SpaceUtils;
                ctor: { new (): SpaceUtils; };
            }
            const SpaceUtils: SpaceUtilsTypeFunc;

            // Nethereum.Generators.Core.TypeMessageModel
            export interface TypeMessageModel extends System.Object, IClassModel, IFileModel {
                get_Namespace(): string;
                get_Name(): string;
                get_ClassNameSuffix(): string;
                get_NamespaceDependencies(): System.Collections.Generic.List$1<string>;
                get_CodeGenLanguage(): CodeGenLanguage;
                set_CodeGenLanguage(value: CodeGenLanguage): void;
                GetTypeName$1(name: string): string;
                GetFileName$1(name: string): string;
                GetVariableName$1(name: string): string;
                GetTypeName(): string;
                GetFileName(): string;
                GetVariableName(): string;
            }
            export interface TypeMessageModelTypeFunc extends TypeFunction {
                (): TypeMessageModelTypeFunc;
                prototype: TypeMessageModel;
            }
            const TypeMessageModel: TypeMessageModelTypeFunc;

            // Nethereum.Generators.Core.Utils
            export interface Utils extends System.Object {
                RemoveUnderscorePrefix(value: string): string;
                LowerCaseFirstCharAndRemoveUnderscorePrefix(value: string): string;
                CapitaliseFirstCharAndRemoveUnderscorePrefix(value: string): string;
                LowerCaseFirstChar(value: string): string;
                CapitaliseFirstChar(value: string): string;
                GetBooleanAsString(value: boolean): string;
            }
            export interface UtilsTypeFunc extends TypeFunction {
                (): UtilsTypeFunc;
                prototype: Utils;
                new (): Utils;
                ctor: { new (): Utils; };
            }
            const Utils: UtilsTypeFunc;

            // Nethereum.Generators.Core.WorkflowFileTemplate
            export interface WorkflowFileTemplate extends CQS.FileTemplate {
                get_WorkflowModel(): IWorkflowModel;
                get_WorkflowTemplate(): IWorkflowTemplate;
                GenerateFullWorkflow(): string;
            }
            export interface WorkflowFileTemplateTypeFunc extends TypeFunction {
                (): WorkflowFileTemplateTypeFunc;
                prototype: WorkflowFileTemplate;
            }
            const WorkflowFileTemplate: WorkflowFileTemplateTypeFunc;

            // Nethereum.Generators.Core.WorkflowGeneratorBase<TWorkflowTemplate, TWorkflowModel>
            export interface WorkflowGeneratorBase$2<TWorkflowTemplate, TWorkflowModel> extends System.Object, IWorkflowFileGenerator, IWFGenerator, IWorkflowGenerator {
                GenerateFileContent$1(outputPath: string): GeneratedFile;
                GenerateFileContent(): string;
                GetFileName(): string;
                GenerateWorkflow(): string;
            }
            export interface WorkflowGeneratorBase$2TypeFunc<TWorkflowTemplate, TWorkflowModel> extends TypeFunction {
                (): WorkflowGeneratorBase$2TypeFunc<TWorkflowTemplate, TWorkflowModel>;
                prototype: WorkflowGeneratorBase$2<TWorkflowTemplate, TWorkflowModel>;
                new (): WorkflowGeneratorBase$2<TWorkflowTemplate, TWorkflowModel>;
                ctor: { new (): WorkflowGeneratorBase$2<TWorkflowTemplate, TWorkflowModel>; };
            }
            export function WorkflowGeneratorBase$2<TWorkflowTemplate, TWorkflowModel>(TWorkflowTemplate: TypeArg<TWorkflowTemplate>, TWorkflowModel: TypeArg<TWorkflowModel>): WorkflowGeneratorBase$2TypeFunc<TWorkflowTemplate, TWorkflowModel>;

            // Nethereum.Generators.Core.WorkflowTemplateBase<TModel>
            export interface WorkflowTemplateBase$1<TModel> extends System.Object, IWorkflowTemplate {
                GenerateWorkflow(): string;
                GenerateFullWorkflow(): string;
            }
            export interface WorkflowTemplateBase$1TypeFunc<TModel> extends TypeFunction {
                (): WorkflowTemplateBase$1TypeFunc<TModel>;
                prototype: WorkflowTemplateBase$1<TModel>;
            }
            export function WorkflowTemplateBase$1<TModel>(TModel: TypeArg<TModel>): WorkflowTemplateBase$1TypeFunc<TModel>;

            // Nethereum.Generators.Core.WorkflowTypeMessageModel
            export interface WorkflowTypeMessageModel extends System.Object, IWorkflowModel, IFileModel {
                get_Namespace(): string;
                get_Name(): string;
                get_WorkflowNameSuffix(): string;
                get_NamespaceDependencies(): System.Collections.Generic.List$1<string>;
                get_CodeGenLanguage(): CodeGenLanguage;
                set_CodeGenLanguage(value: CodeGenLanguage): void;
                GetTypeName$1(name: string): string;
                GetFileName$1(name: string): string;
                GetVariableName$1(name: string): string;
                GetTypeName(): string;
                GetFileName(): string;
                GetVariableName(): string;
            }
            export interface WorkflowTypeMessageModelTypeFunc extends TypeFunction {
                (): WorkflowTypeMessageModelTypeFunc;
                prototype: WorkflowTypeMessageModel;
            }
            const WorkflowTypeMessageModel: WorkflowTypeMessageModelTypeFunc;
            module CodeGenLanguageExt {
                // Nethereum.Generators.Core.CodeGenLanguageExt.StringComparerIgnoreCase
                export interface StringComparerIgnoreCase extends System.Object, System.Collections.Generic.IEqualityComparer$1<String> {
                    Equals$1(x: string, y: string): boolean;
                    GetHashCode$1(obj: string): int;
                }
                export interface StringComparerIgnoreCaseTypeFunc extends TypeFunction {
                    (): StringComparerIgnoreCaseTypeFunc;
                    prototype: StringComparerIgnoreCase;
                    new (): StringComparerIgnoreCase;
                    ctor: { new (): StringComparerIgnoreCase; };
                }
            }
        }
        module Model {
            // Nethereum.Generators.Model.ConstructorABI
            export interface ConstructorABI extends System.Object, Core.IMessage$1<ParameterABI> {
                get_Name(): string;
                set_Name(value: string): void;
                get_InputParameters(): ParameterABI[];
                set_InputParameters(value: ParameterABI[]): void;
            }
            export interface ConstructorABITypeFunc extends TypeFunction {
                (): ConstructorABITypeFunc;
                prototype: ConstructorABI;
                new (): ConstructorABI;
                ctor: { new (): ConstructorABI; };
            }
            const ConstructorABI: ConstructorABITypeFunc;

            // Nethereum.Generators.Model.ContractABI
            export interface ContractABI extends System.Object {
                get_Functions(): FunctionABI[];
                set_Functions(value: FunctionABI[]): void;
                get_Constructor(): ConstructorABI;
                set_Constructor(value: ConstructorABI): void;
                get_Events(): EventABI[];
                set_Events(value: EventABI[]): void;
            }
            export interface ContractABITypeFunc extends TypeFunction {
                (): ContractABITypeFunc;
                prototype: ContractABI;
                new (): ContractABI;
                ctor: { new (): ContractABI; };
            }
            const ContractABI: ContractABITypeFunc;

            // Nethereum.Generators.Model.EventABI
            export interface EventABI extends System.Object {
                get_Name(): string;
                get_InputParameters(): ParameterABI[];
                set_InputParameters(value: ParameterABI[]): void;
            }
            export interface EventABITypeFunc extends TypeFunction {
                (): EventABITypeFunc;
                prototype: EventABI;
                new (name: string): EventABI;
                ctor: { new (name: string): EventABI; };
            }
            const EventABI: EventABITypeFunc;

            // Nethereum.Generators.Model.FunctionABI
            export interface FunctionABI extends System.Object, Core.IMessage$1<ParameterABI> {
                get_Serpent(): boolean;
                get_Constant(): boolean;
                get_Name(): string;
                set_Name(value: string): void;
                get_InputParameters(): ParameterABI[];
                set_InputParameters(value: ParameterABI[]): void;
                get_OutputParameters(): ParameterABI[];
                set_OutputParameters(value: ParameterABI[]): void;
            }
            export interface FunctionABITypeFunc extends TypeFunction {
                (): FunctionABITypeFunc;
                prototype: FunctionABI;
                new (name: string, constant: boolean, serpent?: boolean): FunctionABI;
                ctor: { new (name: string, constant: boolean, serpent?: boolean): FunctionABI; };
            }
            const FunctionABI: FunctionABITypeFunc;

            // Nethereum.Generators.Model.ParameterABI
            export interface ParameterABI extends Core.Parameter {
                get_Indexed(): boolean;
                set_Indexed(value: boolean): void;
            }
            export interface ParameterABITypeFunc extends TypeFunction {
                (): ParameterABITypeFunc;
                prototype: ParameterABI;
                ctor$1: { new (type: string, name?: string, order?: int): ParameterABI; };
                new (type: string, order: int): ParameterABI;
                ctor: { new (type: string, order: int): ParameterABI; };
            }
            const ParameterABI: ParameterABITypeFunc;
        }
        module Service {
            // Nethereum.Generators.Service.AllMessagesGenerator
            export interface AllMessagesGenerator extends Core.MultipleClassGeneratorBase$2<CQS.MultipleClassFileTemplate, AllMessagesModel>, Core.IFileGenerator, Core.IGenerator {
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface AllMessagesGeneratorTypeFunc extends TypeFunction {
                (): AllMessagesGeneratorTypeFunc;
                prototype: AllMessagesGenerator;
                new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, contractName: string, namespace: string, codeGenLanguage: Core.CodeGenLanguage): AllMessagesGenerator;
                ctor: { new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, contractName: string, namespace: string, codeGenLanguage: Core.CodeGenLanguage): AllMessagesGenerator; };
            }
            const AllMessagesGenerator: AllMessagesGeneratorTypeFunc;

            // Nethereum.Generators.Service.AllMessagesModel
            export interface AllMessagesModel extends Core.FileModel, Core.IFileModel {
                get_ContractDeploymentCQSMessageModel(): CQS.ContractDeploymentCQSMessageModel;
            }
            export interface AllMessagesModelTypeFunc extends TypeFunction {
                (): AllMessagesModelTypeFunc;
                prototype: AllMessagesModel;
                new (contractName: string, namespace: string): AllMessagesModel;
                ctor: { new (contractName: string, namespace: string): AllMessagesModel; };
            }
            const AllMessagesModel: AllMessagesModelTypeFunc;

            // Nethereum.Generators.Service.ServiceGenerator
            export interface ServiceGenerator extends Core.ClassGeneratorBase$2<CQS.ClassTemplateBase$1<ServiceModel>, ServiceModel>, Core.IFileGenerator, Core.IGenerator, Core.IClassGenerator {
                get_ContractABI(): Model.ContractABI;
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface ServiceGeneratorTypeFunc extends TypeFunction {
                (): ServiceGeneratorTypeFunc;
                prototype: ServiceGenerator;
                new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string, codeGenLanguage: Core.CodeGenLanguage): ServiceGenerator;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string, codeGenLanguage: Core.CodeGenLanguage): ServiceGenerator; };
            }
            const ServiceGenerator: ServiceGeneratorTypeFunc;

            // Nethereum.Generators.Service.ServiceModel
            export interface ServiceModel extends Core.TypeMessageModel, Core.IClassModel, Core.IFileModel {
                get_ContractABI(): Model.ContractABI;
                get_CQSNamespace(): string;
                get_FunctionOutputNamespace(): string;
                get_ContractDeploymentCQSMessageModel(): CQS.ContractDeploymentCQSMessageModel;
            }
            export interface ServiceModelTypeFunc extends TypeFunction {
                (): ServiceModelTypeFunc;
                prototype: ServiceModel;
                new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string): ServiceModel;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string): ServiceModel; };
            }
            const ServiceModel: ServiceModelTypeFunc;

            // Nethereum.Generators.Service.ContractDeploymentServiceMethodsCSharpTemplate
            export interface ContractDeploymentServiceMethodsCSharpTemplate extends System.Object {
                GenerateMethods(): string;
            }
            export interface ContractDeploymentServiceMethodsCSharpTemplateTypeFunc extends TypeFunction {
                (): ContractDeploymentServiceMethodsCSharpTemplateTypeFunc;
                prototype: ContractDeploymentServiceMethodsCSharpTemplate;
                new (model: ServiceModel): ContractDeploymentServiceMethodsCSharpTemplate;
                ctor: { new (model: ServiceModel): ContractDeploymentServiceMethodsCSharpTemplate; };
            }
            const ContractDeploymentServiceMethodsCSharpTemplate: ContractDeploymentServiceMethodsCSharpTemplateTypeFunc;

            // Nethereum.Generators.Service.FunctionServiceMethodCSharpTemplate
            export interface FunctionServiceMethodCSharpTemplate extends System.Object {
                GenerateMethods(): string;
                GenerateMethod(functionABI: Model.FunctionABI): string;
            }
            export interface FunctionServiceMethodCSharpTemplateTypeFunc extends TypeFunction {
                (): FunctionServiceMethodCSharpTemplateTypeFunc;
                prototype: FunctionServiceMethodCSharpTemplate;
                new (model: ServiceModel): FunctionServiceMethodCSharpTemplate;
                ctor: { new (model: ServiceModel): FunctionServiceMethodCSharpTemplate; };
            }
            const FunctionServiceMethodCSharpTemplate: FunctionServiceMethodCSharpTemplateTypeFunc;

            // Nethereum.Generators.Service.ServiceCSharpTemplate
            export interface ServiceCSharpTemplate extends CQS.ClassTemplateBase$1<ServiceModel>, Core.IClassTemplate {
            }
            export interface ServiceCSharpTemplateTypeFunc extends TypeFunction {
                (): ServiceCSharpTemplateTypeFunc;
                prototype: ServiceCSharpTemplate;
                new (model: ServiceModel): ServiceCSharpTemplate;
                ctor: { new (model: ServiceModel): ServiceCSharpTemplate; };
            }
            const ServiceCSharpTemplate: ServiceCSharpTemplateTypeFunc;

            // Nethereum.Generators.Service.ContractDeploymentServiceMethodsFSharpTemplate
            export interface ContractDeploymentServiceMethodsFSharpTemplate extends System.Object {
                GenerateMethods(): string;
            }
            export interface ContractDeploymentServiceMethodsFSharpTemplateTypeFunc extends TypeFunction {
                (): ContractDeploymentServiceMethodsFSharpTemplateTypeFunc;
                prototype: ContractDeploymentServiceMethodsFSharpTemplate;
                new (model: ServiceModel): ContractDeploymentServiceMethodsFSharpTemplate;
                ctor: { new (model: ServiceModel): ContractDeploymentServiceMethodsFSharpTemplate; };
            }
            const ContractDeploymentServiceMethodsFSharpTemplate: ContractDeploymentServiceMethodsFSharpTemplateTypeFunc;

            // Nethereum.Generators.Service.FunctionServiceMethodFSharpTemplate
            export interface FunctionServiceMethodFSharpTemplate extends System.Object {
                GenerateMethods(): string;
                GenerateMethod(functionABI: Model.FunctionABI): string;
            }
            export interface FunctionServiceMethodFSharpTemplateTypeFunc extends TypeFunction {
                (): FunctionServiceMethodFSharpTemplateTypeFunc;
                prototype: FunctionServiceMethodFSharpTemplate;
                new (model: ServiceModel): FunctionServiceMethodFSharpTemplate;
                ctor: { new (model: ServiceModel): FunctionServiceMethodFSharpTemplate; };
            }
            const FunctionServiceMethodFSharpTemplate: FunctionServiceMethodFSharpTemplateTypeFunc;

            // Nethereum.Generators.Service.ServiceFSharpTemplate
            export interface ServiceFSharpTemplate extends CQS.ClassTemplateBase$1<ServiceModel>, Core.IClassTemplate {
            }
            export interface ServiceFSharpTemplateTypeFunc extends TypeFunction {
                (): ServiceFSharpTemplateTypeFunc;
                prototype: ServiceFSharpTemplate;
                new (model: ServiceModel): ServiceFSharpTemplate;
                ctor: { new (model: ServiceModel): ServiceFSharpTemplate; };
            }
            const ServiceFSharpTemplate: ServiceFSharpTemplateTypeFunc;

            // Nethereum.Generators.Service.ContractDeploymentServiceMethodsVbTemplate
            export interface ContractDeploymentServiceMethodsVbTemplate extends System.Object {
                GenerateMethods(): string;
            }
            export interface ContractDeploymentServiceMethodsVbTemplateTypeFunc extends TypeFunction {
                (): ContractDeploymentServiceMethodsVbTemplateTypeFunc;
                prototype: ContractDeploymentServiceMethodsVbTemplate;
                new (model: ServiceModel): ContractDeploymentServiceMethodsVbTemplate;
                ctor: { new (model: ServiceModel): ContractDeploymentServiceMethodsVbTemplate; };
            }
            const ContractDeploymentServiceMethodsVbTemplate: ContractDeploymentServiceMethodsVbTemplateTypeFunc;

            // Nethereum.Generators.Service.FunctionServiceMethodVbTemplate
            export interface FunctionServiceMethodVbTemplate extends System.Object {
                GenerateMethods(): string;
                GenerateMethod(functionABI: Model.FunctionABI): string;
            }
            export interface FunctionServiceMethodVbTemplateTypeFunc extends TypeFunction {
                (): FunctionServiceMethodVbTemplateTypeFunc;
                prototype: FunctionServiceMethodVbTemplate;
                new (model: ServiceModel): FunctionServiceMethodVbTemplate;
                ctor: { new (model: ServiceModel): FunctionServiceMethodVbTemplate; };
            }
            const FunctionServiceMethodVbTemplate: FunctionServiceMethodVbTemplateTypeFunc;

            // Nethereum.Generators.Service.ServiceVbTemplate
            export interface ServiceVbTemplate extends CQS.ClassTemplateBase$1<ServiceModel>, Core.IClassTemplate {
            }
            export interface ServiceVbTemplateTypeFunc extends TypeFunction {
                (): ServiceVbTemplateTypeFunc;
                prototype: ServiceVbTemplate;
                new (model: ServiceModel): ServiceVbTemplate;
                ctor: { new (model: ServiceModel): ServiceVbTemplate; };
            }
            const ServiceVbTemplate: ServiceVbTemplateTypeFunc;
        }
        module CQS {
            // Nethereum.Generators.CQS.ClassFileTemplate
            export interface ClassFileTemplate extends FileTemplate {
                get_ClassModel(): Core.IClassModel;
                get_ClassTemplate(): Core.IClassTemplate;
                GenerateFullClass(): string;
            }
            export interface ClassFileTemplateTypeFunc extends TypeFunction {
                (): ClassFileTemplateTypeFunc;
                prototype: ClassFileTemplate;
            }
            const ClassFileTemplate: ClassFileTemplateTypeFunc;

            // Nethereum.Generators.CQS.ClassTemplateBase<TModel>
            export interface ClassTemplateBase$1<TModel> extends System.Object, Core.IClassTemplate {
                GenerateClass(): string;
                GenerateFullClass(): string;
            }
            export interface ClassTemplateBase$1TypeFunc<TModel> extends TypeFunction {
                (): ClassTemplateBase$1TypeFunc<TModel>;
                prototype: ClassTemplateBase$1<TModel>;
            }
            export function ClassTemplateBase$1<TModel>(TModel: TypeArg<TModel>): ClassTemplateBase$1TypeFunc<TModel>;

            // Nethereum.Generators.CQS.CSharpClassFileTemplate
            export interface CSharpClassFileTemplate extends ClassFileTemplate {
            }
            export interface CSharpClassFileTemplateTypeFunc extends TypeFunction {
                (): CSharpClassFileTemplateTypeFunc;
                prototype: CSharpClassFileTemplate;
                new (classModel: Core.IClassModel, classTemplate: Core.IClassTemplate): CSharpClassFileTemplate;
                ctor: { new (classModel: Core.IClassModel, classTemplate: Core.IClassTemplate): CSharpClassFileTemplate; };
            }
            const CSharpClassFileTemplate: CSharpClassFileTemplateTypeFunc;

            // Nethereum.Generators.CQS.CSharpMultipleClassFileTemplate
            export interface CSharpMultipleClassFileTemplate extends MultipleClassFileTemplate {
            }
            export interface CSharpMultipleClassFileTemplateTypeFunc extends TypeFunction {
                (): CSharpMultipleClassFileTemplateTypeFunc;
                prototype: CSharpMultipleClassFileTemplate;
                new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, fileModel: Core.IFileModel): CSharpMultipleClassFileTemplate;
                ctor: { new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, fileModel: Core.IFileModel): CSharpMultipleClassFileTemplate; };
            }
            const CSharpMultipleClassFileTemplate: CSharpMultipleClassFileTemplateTypeFunc;

            // Nethereum.Generators.CQS.FileTemplate
            export interface FileTemplate extends System.Object {
                get_FileModel(): Core.IFileModel;
                GenerateNamespaceDependencies(): string;
                GenerateNamespaceDependency(namespaceName: string): string;
            }
            export interface FileTemplateTypeFunc extends TypeFunction {
                (): FileTemplateTypeFunc;
                prototype: FileTemplate;
            }
            const FileTemplate: FileTemplateTypeFunc;

            // Nethereum.Generators.CQS.FSharpClassFileTemplate
            export interface FSharpClassFileTemplate extends ClassFileTemplate {
            }
            export interface FSharpClassFileTemplateTypeFunc extends TypeFunction {
                (): FSharpClassFileTemplateTypeFunc;
                prototype: FSharpClassFileTemplate;
                new (classModel: Core.IClassModel, classTemplate: Core.IClassTemplate): FSharpClassFileTemplate;
                ctor: { new (classModel: Core.IClassModel, classTemplate: Core.IClassTemplate): FSharpClassFileTemplate; };
            }
            const FSharpClassFileTemplate: FSharpClassFileTemplateTypeFunc;

            // Nethereum.Generators.CQS.FSharpMultipleClassFileTemplate
            export interface FSharpMultipleClassFileTemplate extends MultipleClassFileTemplate {
            }
            export interface FSharpMultipleClassFileTemplateTypeFunc extends TypeFunction {
                (): FSharpMultipleClassFileTemplateTypeFunc;
                prototype: FSharpMultipleClassFileTemplate;
                new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, fileModel: Core.IFileModel): FSharpMultipleClassFileTemplate;
                ctor: { new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, fileModel: Core.IFileModel): FSharpMultipleClassFileTemplate; };
            }
            const FSharpMultipleClassFileTemplate: FSharpMultipleClassFileTemplateTypeFunc;

            // Nethereum.Generators.CQS.MultipleClassFileTemplate
            export interface MultipleClassFileTemplate extends FileTemplate {
                GenerateFile(): string;
            }
            export interface MultipleClassFileTemplateTypeFunc extends TypeFunction {
                (): MultipleClassFileTemplateTypeFunc;
                prototype: MultipleClassFileTemplate;
                new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, fileModel: Core.IFileModel): MultipleClassFileTemplate;
                ctor: { new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, fileModel: Core.IFileModel): MultipleClassFileTemplate; };
            }
            const MultipleClassFileTemplate: MultipleClassFileTemplateTypeFunc;

            // Nethereum.Generators.CQS.VbClassFileTemplate
            export interface VbClassFileTemplate extends ClassFileTemplate {
            }
            export interface VbClassFileTemplateTypeFunc extends TypeFunction {
                (): VbClassFileTemplateTypeFunc;
                prototype: VbClassFileTemplate;
                new (classModel: Core.IClassModel, classTemplate: Core.IClassTemplate): VbClassFileTemplate;
                ctor: { new (classModel: Core.IClassModel, classTemplate: Core.IClassTemplate): VbClassFileTemplate; };
            }
            const VbClassFileTemplate: VbClassFileTemplateTypeFunc;

            // Nethereum.Generators.CQS.VbMultipleClassFileTemplate
            export interface VbMultipleClassFileTemplate extends MultipleClassFileTemplate {
            }
            export interface VbMultipleClassFileTemplateTypeFunc extends TypeFunction {
                (): VbMultipleClassFileTemplateTypeFunc;
                prototype: VbMultipleClassFileTemplate;
                new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, fileModel: Core.IFileModel): VbMultipleClassFileTemplate;
                ctor: { new (classGenerators: System.Collections.Generic.IEnumerable$1<Core.IClassGenerator>, fileModel: Core.IFileModel): VbMultipleClassFileTemplate; };
            }
            const VbMultipleClassFileTemplate: VbMultipleClassFileTemplateTypeFunc;

            // Nethereum.Generators.CQS.ContractDeploymentCQSMessageGenerator
            export interface ContractDeploymentCQSMessageGenerator extends Core.ClassGeneratorBase$2<ClassTemplateBase$1<ContractDeploymentCQSMessageModel>, ContractDeploymentCQSMessageModel>, Core.IFileGenerator, Core.IGenerator, Core.IClassGenerator {
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface ContractDeploymentCQSMessageGeneratorTypeFunc extends TypeFunction {
                (): ContractDeploymentCQSMessageGeneratorTypeFunc;
                prototype: ContractDeploymentCQSMessageGenerator;
                new (abi: Model.ConstructorABI, namespaceName: string, byteCode: string, contractName: string, codeGenLanguage: Core.CodeGenLanguage): ContractDeploymentCQSMessageGenerator;
                ctor: { new (abi: Model.ConstructorABI, namespaceName: string, byteCode: string, contractName: string, codeGenLanguage: Core.CodeGenLanguage): ContractDeploymentCQSMessageGenerator; };
            }
            const ContractDeploymentCQSMessageGenerator: ContractDeploymentCQSMessageGeneratorTypeFunc;

            // Nethereum.Generators.CQS.ContractDeploymentCQSMessageModel
            export interface ContractDeploymentCQSMessageModel extends Core.TypeMessageModel, Core.IClassModel, Core.IFileModel {
                get_ConstructorABI(): Model.ConstructorABI;
                get_ByteCode(): string;
            }
            export interface ContractDeploymentCQSMessageModelTypeFunc extends TypeFunction {
                (): ContractDeploymentCQSMessageModelTypeFunc;
                prototype: ContractDeploymentCQSMessageModel;
                new (constructorABI: Model.ConstructorABI, namespace: string, byteCode: string, contractName: string): ContractDeploymentCQSMessageModel;
                ctor: { new (constructorABI: Model.ConstructorABI, namespace: string, byteCode: string, contractName: string): ContractDeploymentCQSMessageModel; };
            }
            const ContractDeploymentCQSMessageModel: ContractDeploymentCQSMessageModelTypeFunc;

            // Nethereum.Generators.CQS.FunctionCQSMessageGenerator
            export interface FunctionCQSMessageGenerator extends Core.ClassGeneratorBase$2<ClassTemplateBase$1<FunctionCQSMessageModel>, FunctionCQSMessageModel>, Core.IFileGenerator, Core.IGenerator, Core.IClassGenerator {
                get_FunctionABI(): Model.FunctionABI;
            }
            export interface FunctionCQSMessageGeneratorTypeFunc extends TypeFunction {
                (): FunctionCQSMessageGeneratorTypeFunc;
                prototype: FunctionCQSMessageGenerator;
                new (functionABI: Model.FunctionABI, namespace: string, namespaceFunctionOutput: string, codeGenLanguage: Core.CodeGenLanguage): FunctionCQSMessageGenerator;
                ctor: { new (functionABI: Model.FunctionABI, namespace: string, namespaceFunctionOutput: string, codeGenLanguage: Core.CodeGenLanguage): FunctionCQSMessageGenerator; };
            }
            const FunctionCQSMessageGenerator: FunctionCQSMessageGeneratorTypeFunc;

            // Nethereum.Generators.CQS.FunctionCQSMessageModel
            export interface FunctionCQSMessageModel extends Core.TypeMessageModel, Core.IClassModel, Core.IFileModel {
                get_FunctionABI(): Model.FunctionABI;
            }
            export interface FunctionCQSMessageModelTypeFunc extends TypeFunction {
                (): FunctionCQSMessageModelTypeFunc;
                prototype: FunctionCQSMessageModel;
                new (functionABI: Model.FunctionABI, namespace: string): FunctionCQSMessageModel;
                ctor: { new (functionABI: Model.FunctionABI, namespace: string): FunctionCQSMessageModel; };
            }
            const FunctionCQSMessageModel: FunctionCQSMessageModelTypeFunc;

            // Nethereum.Generators.CQS.ContractDeploymentCQSMessageCSharpTemplate
            export interface ContractDeploymentCQSMessageCSharpTemplate extends ClassTemplateBase$1<ContractDeploymentCQSMessageModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface ContractDeploymentCQSMessageCSharpTemplateTypeFunc extends TypeFunction {
                (): ContractDeploymentCQSMessageCSharpTemplateTypeFunc;
                prototype: ContractDeploymentCQSMessageCSharpTemplate;
                new (model: ContractDeploymentCQSMessageModel): ContractDeploymentCQSMessageCSharpTemplate;
                ctor: { new (model: ContractDeploymentCQSMessageModel): ContractDeploymentCQSMessageCSharpTemplate; };
            }
            const ContractDeploymentCQSMessageCSharpTemplate: ContractDeploymentCQSMessageCSharpTemplateTypeFunc;

            // Nethereum.Generators.CQS.FunctionCQSMessageCSharpTemplate
            export interface FunctionCQSMessageCSharpTemplate extends ClassTemplateBase$1<FunctionCQSMessageModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface FunctionCQSMessageCSharpTemplateTypeFunc extends TypeFunction {
                (): FunctionCQSMessageCSharpTemplateTypeFunc;
                prototype: FunctionCQSMessageCSharpTemplate;
                new (model: FunctionCQSMessageModel, functionOutputDTOModel: DTOs.FunctionOutputDTOModel, functionABIModel: Core.FunctionABIModel): FunctionCQSMessageCSharpTemplate;
                ctor: { new (model: FunctionCQSMessageModel, functionOutputDTOModel: DTOs.FunctionOutputDTOModel, functionABIModel: Core.FunctionABIModel): FunctionCQSMessageCSharpTemplate; };
            }
            const FunctionCQSMessageCSharpTemplate: FunctionCQSMessageCSharpTemplateTypeFunc;

            // Nethereum.Generators.CQS.ContractDeploymentCQSMessageFSharpTemplate
            export interface ContractDeploymentCQSMessageFSharpTemplate extends ClassTemplateBase$1<ContractDeploymentCQSMessageModel>, Core.IClassTemplate {
            }
            export interface ContractDeploymentCQSMessageFSharpTemplateTypeFunc extends TypeFunction {
                (): ContractDeploymentCQSMessageFSharpTemplateTypeFunc;
                prototype: ContractDeploymentCQSMessageFSharpTemplate;
                new (model: ContractDeploymentCQSMessageModel): ContractDeploymentCQSMessageFSharpTemplate;
                ctor: { new (model: ContractDeploymentCQSMessageModel): ContractDeploymentCQSMessageFSharpTemplate; };
            }
            const ContractDeploymentCQSMessageFSharpTemplate: ContractDeploymentCQSMessageFSharpTemplateTypeFunc;

            // Nethereum.Generators.CQS.FunctionCQSMessageFSharpTemplate
            export interface FunctionCQSMessageFSharpTemplate extends ClassTemplateBase$1<FunctionCQSMessageModel>, Core.IClassTemplate {
            }
            export interface FunctionCQSMessageFSharpTemplateTypeFunc extends TypeFunction {
                (): FunctionCQSMessageFSharpTemplateTypeFunc;
                prototype: FunctionCQSMessageFSharpTemplate;
                new (model: FunctionCQSMessageModel, functionOutputDTOModel: DTOs.FunctionOutputDTOModel, functionABIModel: Core.FunctionABIModel): FunctionCQSMessageFSharpTemplate;
                ctor: { new (model: FunctionCQSMessageModel, functionOutputDTOModel: DTOs.FunctionOutputDTOModel, functionABIModel: Core.FunctionABIModel): FunctionCQSMessageFSharpTemplate; };
            }
            const FunctionCQSMessageFSharpTemplate: FunctionCQSMessageFSharpTemplateTypeFunc;

            // Nethereum.Generators.CQS.ContractDeploymentCQSMessageVbTemplate
            export interface ContractDeploymentCQSMessageVbTemplate extends ClassTemplateBase$1<ContractDeploymentCQSMessageModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface ContractDeploymentCQSMessageVbTemplateTypeFunc extends TypeFunction {
                (): ContractDeploymentCQSMessageVbTemplateTypeFunc;
                prototype: ContractDeploymentCQSMessageVbTemplate;
                new (model: ContractDeploymentCQSMessageModel): ContractDeploymentCQSMessageVbTemplate;
                ctor: { new (model: ContractDeploymentCQSMessageModel): ContractDeploymentCQSMessageVbTemplate; };
            }
            const ContractDeploymentCQSMessageVbTemplate: ContractDeploymentCQSMessageVbTemplateTypeFunc;

            // Nethereum.Generators.CQS.FunctionCQSMessageVbTemplate
            export interface FunctionCQSMessageVbTemplate extends ClassTemplateBase$1<FunctionCQSMessageModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface FunctionCQSMessageVbTemplateTypeFunc extends TypeFunction {
                (): FunctionCQSMessageVbTemplateTypeFunc;
                prototype: FunctionCQSMessageVbTemplate;
                new (model: FunctionCQSMessageModel, functionOutputDTOModel: DTOs.FunctionOutputDTOModel, functionABIModel: Core.FunctionABIModel): FunctionCQSMessageVbTemplate;
                ctor: { new (model: FunctionCQSMessageModel, functionOutputDTOModel: DTOs.FunctionOutputDTOModel, functionABIModel: Core.FunctionABIModel): FunctionCQSMessageVbTemplate; };
            }
            const FunctionCQSMessageVbTemplate: FunctionCQSMessageVbTemplateTypeFunc;
        }
        module DataWorkflow {
            // Nethereum.Generators.DataWorkflow.DataWorkflowEventSqlModel
            export interface DataWorkflowEventSqlModel extends Core.WorkflowTypeMessageModel, Core.IWorkflowModel, Core.IFileModel {
                get_EventABI(): Model.EventABI;
                CanGenerateOutputLogicApp(): boolean;
            }
            export interface DataWorkflowEventSqlModelTypeFunc extends TypeFunction {
                (): DataWorkflowEventSqlModelTypeFunc;
                prototype: DataWorkflowEventSqlModel;
                new (eventABI: Model.EventABI, namespace: string): DataWorkflowEventSqlModel;
                ctor: { new (eventABI: Model.EventABI, namespace: string): DataWorkflowEventSqlModel; };
            }
            const DataWorkflowEventSqlModel: DataWorkflowEventSqlModelTypeFunc;

            // Nethereum.Generators.DataWorkflow.DataWorkflowProjectGenerator
            export interface DataWorkflowProjectGenerator extends System.Object {
                get_ContractABI(): Model.ContractABI;
                get_ContractName(): string;
                get_ByteCode(): string;
                get_BaseNamespace(): string;
                get_ServiceNamespace(): string;
                get_BaseOutputPath(): string;
                get_PathDelimiter(): string;
                get_CodeGenLanguage(): Core.CodeGenLanguage;
                get_ContractAddress(): string;
                get_ServiceType(): Core.ServiceType;
                get_SubscriptionId(): string;
                get_Location(): string;
                get_ContractAbiString(): string;
                GenerateAll(): Core.GeneratedFile[];
                GenerateAllLogicAppFiles(): System.Collections.Generic.List$1<Core.GeneratedFile>;
                GenerateLogicAppFiles(): System.Collections.Generic.List$1<Core.GeneratedFile>;
                GetAllLogicAppGenerators(): System.Collections.Generic.List$1<Core.IWorkflowFileGenerator>;
                GetFullNamespace(namespace: string): string;
                GetFullPath(namespace: string): string;
            }
            export interface DataWorkflowProjectGeneratorTypeFunc extends TypeFunction {
                (): DataWorkflowProjectGeneratorTypeFunc;
                prototype: DataWorkflowProjectGenerator;
                new (contractABI: Model.ContractABI, contractName: string, byteCode: string, baseNamespace: string, serviceNamespace: string, baseOutputPath: string, pathDelimiter: string, serviceType: Core.ServiceType, codeGenLanguage: Core.CodeGenLanguage, contractAddress: string, subscriptionId: string, location: string, contractAbiString: string): DataWorkflowProjectGenerator;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string, baseNamespace: string, serviceNamespace: string, baseOutputPath: string, pathDelimiter: string, serviceType: Core.ServiceType, codeGenLanguage: Core.CodeGenLanguage, contractAddress: string, subscriptionId: string, location: string, contractAbiString: string): DataWorkflowProjectGenerator; };
            }
            const DataWorkflowProjectGenerator: DataWorkflowProjectGeneratorTypeFunc;

            // Nethereum.Generators.DataWorkflow.DataWorkflowSqlOutputGenerator
            export interface DataWorkflowSqlOutputGenerator extends Core.WorkflowGeneratorBase$2<Core.WorkflowTemplateBase$1<DataWorkflowEventSqlModel>, DataWorkflowEventSqlModel>, Core.IWorkflowFileGenerator, Core.IWFGenerator, Core.IWorkflowGenerator {
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface DataWorkflowSqlOutputGeneratorTypeFunc extends TypeFunction {
                (): DataWorkflowSqlOutputGeneratorTypeFunc;
                prototype: DataWorkflowSqlOutputGenerator;
                new (eventABI: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage): DataWorkflowSqlOutputGenerator;
                ctor: { new (eventABI: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage): DataWorkflowSqlOutputGenerator; };
            }
            const DataWorkflowSqlOutputGenerator: DataWorkflowSqlOutputGeneratorTypeFunc;

            // Nethereum.Generators.DataWorkflow.DataWorkflowEventLogicAppModel
            export interface DataWorkflowEventLogicAppModel extends Core.WorkflowTypeMessageModel, Core.IWorkflowModel, Core.IFileModel {
                get_EventABI(): Model.EventABI;
                CanGenerateOutputLogicApp(): boolean;
            }
            export interface DataWorkflowEventLogicAppModelTypeFunc extends TypeFunction {
                (): DataWorkflowEventLogicAppModelTypeFunc;
                prototype: DataWorkflowEventLogicAppModel;
                new (eventABI: Model.EventABI, namespace: string): DataWorkflowEventLogicAppModel;
                ctor: { new (eventABI: Model.EventABI, namespace: string): DataWorkflowEventLogicAppModel; };
            }
            const DataWorkflowEventLogicAppModel: DataWorkflowEventLogicAppModelTypeFunc;

            // Nethereum.Generators.DataWorkflow.DataWorkflowFunctionOutputLogicAppGenerator
            export interface DataWorkflowFunctionOutputLogicAppGenerator extends Core.WorkflowGeneratorBase$2<Core.WorkflowTemplateBase$1<DataWorkflowEventLogicAppModel>, DataWorkflowEventLogicAppModel>, Core.IWorkflowFileGenerator, Core.IWFGenerator, Core.IWorkflowGenerator {
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface DataWorkflowFunctionOutputLogicAppGeneratorTypeFunc extends TypeFunction {
                (): DataWorkflowFunctionOutputLogicAppGeneratorTypeFunc;
                prototype: DataWorkflowFunctionOutputLogicAppGenerator;
                new (eventABI: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage, contractAddress: string, subscriptionId: string, escapedAbi: string, location: string): DataWorkflowFunctionOutputLogicAppGenerator;
                ctor: { new (eventABI: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage, contractAddress: string, subscriptionId: string, escapedAbi: string, location: string): DataWorkflowFunctionOutputLogicAppGenerator; };
            }
            const DataWorkflowFunctionOutputLogicAppGenerator: DataWorkflowFunctionOutputLogicAppGeneratorTypeFunc;
            module LogicApps {
                // Nethereum.Generators.DataWorkflow.LogicApps.DataWorkflowSqlOutputLogicAppTemplate
                export interface DataWorkflowSqlOutputLogicAppTemplate extends Core.WorkflowTemplateBase$1<DataWorkflowEventSqlModel>, Core.IWorkflowTemplate {
                }
                export interface DataWorkflowSqlOutputLogicAppTemplateTypeFunc extends TypeFunction {
                    (): DataWorkflowSqlOutputLogicAppTemplateTypeFunc;
                    prototype: DataWorkflowSqlOutputLogicAppTemplate;
                    new (model: DataWorkflowEventSqlModel): DataWorkflowSqlOutputLogicAppTemplate;
                    ctor: { new (model: DataWorkflowEventSqlModel): DataWorkflowSqlOutputLogicAppTemplate; };
                }
                const DataWorkflowSqlOutputLogicAppTemplate: DataWorkflowSqlOutputLogicAppTemplateTypeFunc;

                // Nethereum.Generators.DataWorkflow.LogicApps.DataWorkflowFunctionOutputLogicAppTemplate
                export interface DataWorkflowFunctionOutputLogicAppTemplate extends Core.WorkflowTemplateBase$1<DataWorkflowEventLogicAppModel>, Core.IWorkflowTemplate {
                    GetLogicAppStart(): string;
                    GetBlockchainEventTriggerForLogicApp(escapedAbi: string, contractAddress: string): string;
                    GetActions(): string;
                    GetLogicAppEnd(): string;
                }
                export interface DataWorkflowFunctionOutputLogicAppTemplateTypeFunc extends TypeFunction {
                    (): DataWorkflowFunctionOutputLogicAppTemplateTypeFunc;
                    prototype: DataWorkflowFunctionOutputLogicAppTemplate;
                    new (model: DataWorkflowEventLogicAppModel, contractAddress: string, escapedAbi: string, subsciptionId: string, location: string): DataWorkflowFunctionOutputLogicAppTemplate;
                    ctor: { new (model: DataWorkflowEventLogicAppModel, contractAddress: string, escapedAbi: string, subsciptionId: string, location: string): DataWorkflowFunctionOutputLogicAppTemplate; };
                }
                const DataWorkflowFunctionOutputLogicAppTemplate: DataWorkflowFunctionOutputLogicAppTemplateTypeFunc;
            }
            module FlowApps {
                // Nethereum.Generators.DataWorkflow.FlowApps.DataWorkflowEventFlowAppModel
                export interface DataWorkflowEventFlowAppModel extends Core.WorkflowTypeMessageModel, Core.IWorkflowModel, Core.IFileModel {
                    get_EventABI(): Model.EventABI;
                    CanGenerateOutputLogicApp(): boolean;
                }
                export interface DataWorkflowEventFlowAppModelTypeFunc extends TypeFunction {
                    (): DataWorkflowEventFlowAppModelTypeFunc;
                    prototype: DataWorkflowEventFlowAppModel;
                    new (eventABI: Model.EventABI, namespace: string): DataWorkflowEventFlowAppModel;
                    ctor: { new (eventABI: Model.EventABI, namespace: string): DataWorkflowEventFlowAppModel; };
                }
                const DataWorkflowEventFlowAppModel: DataWorkflowEventFlowAppModelTypeFunc;

                // Nethereum.Generators.DataWorkflow.FlowApps.DataWorkflowFunctionOutputFlowAppGenerator
                export interface DataWorkflowFunctionOutputFlowAppGenerator extends Core.WorkflowGeneratorBase$2<Core.WorkflowTemplateBase$1<DataWorkflowEventFlowAppModel>, DataWorkflowEventFlowAppModel>, Core.IWorkflowFileGenerator, Core.IWFGenerator, Core.IWorkflowGenerator {
                    InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
                }
                export interface DataWorkflowFunctionOutputFlowAppGeneratorTypeFunc extends TypeFunction {
                    (): DataWorkflowFunctionOutputFlowAppGeneratorTypeFunc;
                    prototype: DataWorkflowFunctionOutputFlowAppGenerator;
                    new (eventABI: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage, contractAddress: string, subscriptionId: string, escapedAbi: string, location: string): DataWorkflowFunctionOutputFlowAppGenerator;
                    ctor: { new (eventABI: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage, contractAddress: string, subscriptionId: string, escapedAbi: string, location: string): DataWorkflowFunctionOutputFlowAppGenerator; };
                }
                const DataWorkflowFunctionOutputFlowAppGenerator: DataWorkflowFunctionOutputFlowAppGeneratorTypeFunc;

                // Nethereum.Generators.DataWorkflow.FlowApps.DataWorkflowFunctionOutputFlowAppTemplate
                export interface DataWorkflowFunctionOutputFlowAppTemplate extends Core.WorkflowTemplateBase$1<DataWorkflowEventFlowAppModel>, Core.IWorkflowTemplate {
                    GetConnections(): string;
                    GetLogicAppStart(): string;
                    GetBlockchainEventTriggerForLogicApp(escapedAbi: string, contractAddress: string): string;
                    GetActions(): string;
                    GetLogicAppEnd(): string;
                }
                export interface DataWorkflowFunctionOutputFlowAppTemplateTypeFunc extends TypeFunction {
                    (): DataWorkflowFunctionOutputFlowAppTemplateTypeFunc;
                    prototype: DataWorkflowFunctionOutputFlowAppTemplate;
                    new (model: DataWorkflowEventFlowAppModel, contractAddress: string, escapedAbi: string, subsciptionId: string, location: string): DataWorkflowFunctionOutputFlowAppTemplate;
                    ctor: { new (model: DataWorkflowEventFlowAppModel, contractAddress: string, escapedAbi: string, subsciptionId: string, location: string): DataWorkflowFunctionOutputFlowAppTemplate; };
                }
                const DataWorkflowFunctionOutputFlowAppTemplate: DataWorkflowFunctionOutputFlowAppTemplateTypeFunc;
            }
        }
        module DTOs {
            // Nethereum.Generators.DTOs.EventDTOGenerator
            export interface EventDTOGenerator extends Core.ClassGeneratorBase$2<CQS.ClassTemplateBase$1<EventDTOModel>, EventDTOModel>, Core.IFileGenerator, Core.IGenerator, Core.IClassGenerator {
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface EventDTOGeneratorTypeFunc extends TypeFunction {
                (): EventDTOGeneratorTypeFunc;
                prototype: EventDTOGenerator;
                new (abi: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage): EventDTOGenerator;
                ctor: { new (abi: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage): EventDTOGenerator; };
            }
            const EventDTOGenerator: EventDTOGeneratorTypeFunc;

            // Nethereum.Generators.DTOs.EventDTOModel
            export interface EventDTOModel extends Core.TypeMessageModel, Core.IClassModel, Core.IFileModel {
                get_EventABI(): Model.EventABI;
                CanGenerateOutputDTO(): boolean;
            }
            export interface EventDTOModelTypeFunc extends TypeFunction {
                (): EventDTOModelTypeFunc;
                prototype: EventDTOModel;
                new (eventABI: Model.EventABI, namespace: string): EventDTOModel;
                ctor: { new (eventABI: Model.EventABI, namespace: string): EventDTOModel; };
            }
            const EventDTOModel: EventDTOModelTypeFunc;

            // Nethereum.Generators.DTOs.FunctionOutputDTOGenerator
            export interface FunctionOutputDTOGenerator extends Core.ClassGeneratorBase$2<CQS.ClassTemplateBase$1<FunctionOutputDTOModel>, FunctionOutputDTOModel>, Core.IFileGenerator, Core.IGenerator, Core.IClassGenerator {
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface FunctionOutputDTOGeneratorTypeFunc extends TypeFunction {
                (): FunctionOutputDTOGeneratorTypeFunc;
                prototype: FunctionOutputDTOGenerator;
                new (functionABI: Model.FunctionABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage): FunctionOutputDTOGenerator;
                ctor: { new (functionABI: Model.FunctionABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage): FunctionOutputDTOGenerator; };
            }
            const FunctionOutputDTOGenerator: FunctionOutputDTOGeneratorTypeFunc;

            // Nethereum.Generators.DTOs.FunctionOutputDTOModel
            export interface FunctionOutputDTOModel extends Core.TypeMessageModel, Core.IClassModel, Core.IFileModel {
                get_FunctionABI(): Model.FunctionABI;
                CanGenerateOutputDTO(): boolean;
            }
            export interface FunctionOutputDTOModelTypeFunc extends TypeFunction {
                (): FunctionOutputDTOModelTypeFunc;
                prototype: FunctionOutputDTOModel;
                new (functionABI: Model.FunctionABI, namespace: string): FunctionOutputDTOModel;
                ctor: { new (functionABI: Model.FunctionABI, namespace: string): FunctionOutputDTOModel; };
            }
            const FunctionOutputDTOModel: FunctionOutputDTOModelTypeFunc;

            // Nethereum.Generators.DTOs.EventDTOCSharpTemplate
            export interface EventDTOCSharpTemplate extends CQS.ClassTemplateBase$1<EventDTOModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface EventDTOCSharpTemplateTypeFunc extends TypeFunction {
                (): EventDTOCSharpTemplateTypeFunc;
                prototype: EventDTOCSharpTemplate;
                new (eventDTOModel: EventDTOModel): EventDTOCSharpTemplate;
                ctor: { new (eventDTOModel: EventDTOModel): EventDTOCSharpTemplate; };
            }
            const EventDTOCSharpTemplate: EventDTOCSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.FunctionOutputDTOCSharpTemplate
            export interface FunctionOutputDTOCSharpTemplate extends CQS.ClassTemplateBase$1<FunctionOutputDTOModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface FunctionOutputDTOCSharpTemplateTypeFunc extends TypeFunction {
                (): FunctionOutputDTOCSharpTemplateTypeFunc;
                prototype: FunctionOutputDTOCSharpTemplate;
                new (model: FunctionOutputDTOModel): FunctionOutputDTOCSharpTemplate;
                ctor: { new (model: FunctionOutputDTOModel): FunctionOutputDTOCSharpTemplate; };
            }
            const FunctionOutputDTOCSharpTemplate: FunctionOutputDTOCSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.ParameterABIEventDTOCSharpTemplate
            export interface ParameterABIEventDTOCSharpTemplate extends System.Object {
                GenerateAllProperties(parameters: Model.ParameterABI[]): string;
                GenerateProperty(parameter: Model.ParameterABI): string;
            }
            export interface ParameterABIEventDTOCSharpTemplateTypeFunc extends TypeFunction {
                (): ParameterABIEventDTOCSharpTemplateTypeFunc;
                prototype: ParameterABIEventDTOCSharpTemplate;
                new (): ParameterABIEventDTOCSharpTemplate;
                ctor: { new (): ParameterABIEventDTOCSharpTemplate; };
            }
            const ParameterABIEventDTOCSharpTemplate: ParameterABIEventDTOCSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.ParameterABIFunctionDTOCSharpTemplate
            export interface ParameterABIFunctionDTOCSharpTemplate extends System.Object {
                GenerateAllProperties(parameters: Model.ParameterABI[]): string;
                GenerateProperty(parameter: Model.ParameterABI): string;
                GenerateAllFunctionParameters(parameters: Model.ParameterABI[]): string;
                GenerateFunctionParameter(parameter: Model.ParameterABI): string;
                GenerateAssigmentFunctionParametersToProperties(parameters: Model.ParameterABI[], objectName: string, spacing: string): string;
                GenerateAssigmentFunctionParameterToProperty(parameter: Model.ParameterABI, objectName: string, spacing: string): string;
            }
            export interface ParameterABIFunctionDTOCSharpTemplateTypeFunc extends TypeFunction {
                (): ParameterABIFunctionDTOCSharpTemplateTypeFunc;
                prototype: ParameterABIFunctionDTOCSharpTemplate;
                new (): ParameterABIFunctionDTOCSharpTemplate;
                ctor: { new (): ParameterABIFunctionDTOCSharpTemplate; };
            }
            const ParameterABIFunctionDTOCSharpTemplate: ParameterABIFunctionDTOCSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.EventDTOFSharpTemplate
            export interface EventDTOFSharpTemplate extends CQS.ClassTemplateBase$1<EventDTOModel>, Core.IClassTemplate {
            }
            export interface EventDTOFSharpTemplateTypeFunc extends TypeFunction {
                (): EventDTOFSharpTemplateTypeFunc;
                prototype: EventDTOFSharpTemplate;
                new (eventDTOModel: EventDTOModel): EventDTOFSharpTemplate;
                ctor: { new (eventDTOModel: EventDTOModel): EventDTOFSharpTemplate; };
            }
            const EventDTOFSharpTemplate: EventDTOFSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.FunctionOutputDTOFSharpTemplate
            export interface FunctionOutputDTOFSharpTemplate extends CQS.ClassTemplateBase$1<FunctionOutputDTOModel>, Core.IClassTemplate {
            }
            export interface FunctionOutputDTOFSharpTemplateTypeFunc extends TypeFunction {
                (): FunctionOutputDTOFSharpTemplateTypeFunc;
                prototype: FunctionOutputDTOFSharpTemplate;
                new (model: FunctionOutputDTOModel): FunctionOutputDTOFSharpTemplate;
                ctor: { new (model: FunctionOutputDTOModel): FunctionOutputDTOFSharpTemplate; };
            }
            const FunctionOutputDTOFSharpTemplate: FunctionOutputDTOFSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.ParameterABIEventDTOFSharpTemplate
            export interface ParameterABIEventDTOFSharpTemplate extends System.Object {
                GenerateAllProperties(parameters: Model.ParameterABI[]): string;
                GenerateProperty(parameter: Model.ParameterABI): string;
            }
            export interface ParameterABIEventDTOFSharpTemplateTypeFunc extends TypeFunction {
                (): ParameterABIEventDTOFSharpTemplateTypeFunc;
                prototype: ParameterABIEventDTOFSharpTemplate;
                new (): ParameterABIEventDTOFSharpTemplate;
                ctor: { new (): ParameterABIEventDTOFSharpTemplate; };
            }
            const ParameterABIEventDTOFSharpTemplate: ParameterABIEventDTOFSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.ParameterABIFunctionDTOFSharpTemplate
            export interface ParameterABIFunctionDTOFSharpTemplate extends System.Object {
                GenerateAllProperties(parameters: Model.ParameterABI[]): string;
                GenerateProperty(parameter: Model.ParameterABI): string;
                GenerateAllFunctionParameters(parameters: Model.ParameterABI[]): string;
                GenerateFunctionParameter(parameter: Model.ParameterABI): string;
                GenerateAssigmentFunctionParametersToProperties(parameters: Model.ParameterABI[], objectName: string, spacing: string): string;
                GenerateAssigmentFunctionParameterToProperty(parameter: Model.ParameterABI, objectName: string, spacing: string): string;
            }
            export interface ParameterABIFunctionDTOFSharpTemplateTypeFunc extends TypeFunction {
                (): ParameterABIFunctionDTOFSharpTemplateTypeFunc;
                prototype: ParameterABIFunctionDTOFSharpTemplate;
                new (): ParameterABIFunctionDTOFSharpTemplate;
                ctor: { new (): ParameterABIFunctionDTOFSharpTemplate; };
            }
            const ParameterABIFunctionDTOFSharpTemplate: ParameterABIFunctionDTOFSharpTemplateTypeFunc;

            // Nethereum.Generators.DTOs.EventDTOVbTemplate
            export interface EventDTOVbTemplate extends CQS.ClassTemplateBase$1<EventDTOModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface EventDTOVbTemplateTypeFunc extends TypeFunction {
                (): EventDTOVbTemplateTypeFunc;
                prototype: EventDTOVbTemplate;
                new (eventDTOModel: EventDTOModel): EventDTOVbTemplate;
                ctor: { new (eventDTOModel: EventDTOModel): EventDTOVbTemplate; };
            }
            const EventDTOVbTemplate: EventDTOVbTemplateTypeFunc;

            // Nethereum.Generators.DTOs.FunctionOutputDTOVbTemplate
            export interface FunctionOutputDTOVbTemplate extends CQS.ClassTemplateBase$1<FunctionOutputDTOModel>, Core.IClassTemplate {
                GetPartialMainClass(): string;
            }
            export interface FunctionOutputDTOVbTemplateTypeFunc extends TypeFunction {
                (): FunctionOutputDTOVbTemplateTypeFunc;
                prototype: FunctionOutputDTOVbTemplate;
                new (model: FunctionOutputDTOModel): FunctionOutputDTOVbTemplate;
                ctor: { new (model: FunctionOutputDTOModel): FunctionOutputDTOVbTemplate; };
            }
            const FunctionOutputDTOVbTemplate: FunctionOutputDTOVbTemplateTypeFunc;

            // Nethereum.Generators.DTOs.ParameterABIEventDTOVbTemplate
            export interface ParameterABIEventDTOVbTemplate extends System.Object {
                GenerateAllProperties(parameters: Model.ParameterABI[]): string;
                GenerateProperty(parameter: Model.ParameterABI): string;
            }
            export interface ParameterABIEventDTOVbTemplateTypeFunc extends TypeFunction {
                (): ParameterABIEventDTOVbTemplateTypeFunc;
                prototype: ParameterABIEventDTOVbTemplate;
                new (): ParameterABIEventDTOVbTemplate;
                ctor: { new (): ParameterABIEventDTOVbTemplate; };
            }
            const ParameterABIEventDTOVbTemplate: ParameterABIEventDTOVbTemplateTypeFunc;

            // Nethereum.Generators.DTOs.ParameterABIFunctionDTOVbTemplate
            export interface ParameterABIFunctionDTOVbTemplate extends System.Object {
                GenerateAllProperties(parameters: Model.ParameterABI[]): string;
                GenerateProperty(parameter: Model.ParameterABI): string;
                GenerateAllFunctionParameters(parameters: Model.ParameterABI[]): string;
                GenerateFunctionParameter(parameter: Model.ParameterABI): string;
                GenerateAssigmentFunctionParametersToProperties(parameters: Model.ParameterABI[], objectName: string, spacing: string): string;
                GenerateAssigmentFunctionParameterToProperty(parameter: Model.ParameterABI, objectName: string, spacing: string): string;
            }
            export interface ParameterABIFunctionDTOVbTemplateTypeFunc extends TypeFunction {
                (): ParameterABIFunctionDTOVbTemplateTypeFunc;
                prototype: ParameterABIFunctionDTOVbTemplate;
                new (): ParameterABIFunctionDTOVbTemplate;
                ctor: { new (): ParameterABIFunctionDTOVbTemplate; };
            }
            const ParameterABIFunctionDTOVbTemplate: ParameterABIFunctionDTOVbTemplateTypeFunc;
        }
        module MessagingWorkflow {
            // Nethereum.Generators.MessagingWorkflow.MessagingWorkflowProjectGenerator
            export interface MessagingWorkflowProjectGenerator extends System.Object {
                get_ContractABI(): Model.ContractABI;
                get_ContractName(): string;
                get_ByteCode(): string;
                get_BaseNamespace(): string;
                get_ServiceNamespace(): string;
                get_BaseOutputPath(): string;
                get_PathDelimiter(): string;
                get_CodeGenLanguage(): Core.CodeGenLanguage;
                get_ServiceType(): Core.ServiceType;
                get_SubscriptionId(): string;
                get_Location(): string;
                get_ContractAbiString(): string;
                get_ContractAddress(): string;
                get_TopicName(): string;
                set_TopicName(value: string): void;
                get_MessagingType(): Core.MessagingType;
                set_MessagingType(value: Core.MessagingType): void;
                GenerateAll(): Core.GeneratedFile[];
                GenerateAllLogicAppFiles(): System.Collections.Generic.List$1<Core.GeneratedFile>;
                GenerateLogicAppFiles(): System.Collections.Generic.List$1<Core.GeneratedFile>;
                GetAllLogicAppGenerators(): System.Collections.Generic.List$1<Core.IWorkflowFileGenerator>;
                GetFullNamespace(namespace: string): string;
                GetFullPath(namespace: string): string;
            }
            export interface MessagingWorkflowProjectGeneratorTypeFunc extends TypeFunction {
                (): MessagingWorkflowProjectGeneratorTypeFunc;
                prototype: MessagingWorkflowProjectGenerator;
                new (contractABI: Model.ContractABI, contractName: string, byteCode: string, baseNamespace: string, serviceNamespace: string, baseOutputPath: string, pathDelimiter: string, serviceType: Core.ServiceType, codeGenLanguage: Core.CodeGenLanguage, contractAddress: string, subscriptionId: string, location: string, contractAbiString: string, topicName: string, messagingType: Core.MessagingType): MessagingWorkflowProjectGenerator;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string, baseNamespace: string, serviceNamespace: string, baseOutputPath: string, pathDelimiter: string, serviceType: Core.ServiceType, codeGenLanguage: Core.CodeGenLanguage, contractAddress: string, subscriptionId: string, location: string, contractAbiString: string, topicName: string, messagingType: Core.MessagingType): MessagingWorkflowProjectGenerator; };
            }
            const MessagingWorkflowProjectGenerator: MessagingWorkflowProjectGeneratorTypeFunc;
            module FlowApps {
                // Nethereum.Generators.MessagingWorkflow.FlowApps.MessagingWorkflowEventFlowAppGenerator
                export interface MessagingWorkflowEventFlowAppGenerator extends Core.WorkflowGeneratorBase$2<Core.WorkflowTemplateBase$1<MessagingWorkflowEventFlowAppModel>, MessagingWorkflowEventFlowAppModel>, Core.IWorkflowFileGenerator, Core.IWFGenerator, Core.IWorkflowGenerator {
                    InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
                }
                export interface MessagingWorkflowEventFlowAppGeneratorTypeFunc extends TypeFunction {
                    (): MessagingWorkflowEventFlowAppGeneratorTypeFunc;
                    prototype: MessagingWorkflowEventFlowAppGenerator;
                    new (abi: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage, contractAddress: string, subscriptionId: string, escapedAbi: string, location: string, topicName: string, messagingType: Core.MessagingType): MessagingWorkflowEventFlowAppGenerator;
                    ctor: { new (abi: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage, contractAddress: string, subscriptionId: string, escapedAbi: string, location: string, topicName: string, messagingType: Core.MessagingType): MessagingWorkflowEventFlowAppGenerator; };
                }
                const MessagingWorkflowEventFlowAppGenerator: MessagingWorkflowEventFlowAppGeneratorTypeFunc;

                // Nethereum.Generators.MessagingWorkflow.FlowApps.MessagingWorkflowEventFlowAppModel
                export interface MessagingWorkflowEventFlowAppModel extends Core.WorkflowTypeMessageModel, Core.IWorkflowModel, Core.IFileModel {
                    get_EventABI(): Model.EventABI;
                    CanGenerateOutputLogicApp(): boolean;
                }
                export interface MessagingWorkflowEventFlowAppModelTypeFunc extends TypeFunction {
                    (): MessagingWorkflowEventFlowAppModelTypeFunc;
                    prototype: MessagingWorkflowEventFlowAppModel;
                    new (eventABI: Model.EventABI, namespace: string): MessagingWorkflowEventFlowAppModel;
                    ctor: { new (eventABI: Model.EventABI, namespace: string): MessagingWorkflowEventFlowAppModel; };
                }
                const MessagingWorkflowEventFlowAppModel: MessagingWorkflowEventFlowAppModelTypeFunc;

                // Nethereum.Generators.MessagingWorkflow.FlowApps.MessagingWorkflowEventFlowAppTemplate
                export interface MessagingWorkflowEventFlowAppTemplate extends Core.WorkflowTemplateBase$1<MessagingWorkflowEventFlowAppModel>, Core.IWorkflowTemplate {
                    GetLogicAppStart(): string;
                    GetBlockchainEventTriggerForLogicApp(escapedAbi: string, contractAddress: string): string;
                    GetEventGridActions(): string;
                    GetServiceBusActions(): string;
                    GetLogicAppEnd(): string;
                }
                export interface MessagingWorkflowEventFlowAppTemplateTypeFunc extends TypeFunction {
                    (): MessagingWorkflowEventFlowAppTemplateTypeFunc;
                    prototype: MessagingWorkflowEventFlowAppTemplate;
                    new (model: MessagingWorkflowEventFlowAppModel, contractAddress: string, escapedAbi: string, subsciptionId: string, location: string, topicName: string, messagingType: Core.MessagingType): MessagingWorkflowEventFlowAppTemplate;
                    ctor: { new (model: MessagingWorkflowEventFlowAppModel, contractAddress: string, escapedAbi: string, subsciptionId: string, location: string, topicName: string, messagingType: Core.MessagingType): MessagingWorkflowEventFlowAppTemplate; };
                }
                const MessagingWorkflowEventFlowAppTemplate: MessagingWorkflowEventFlowAppTemplateTypeFunc;
            }
            module LogicApps {
                // Nethereum.Generators.MessagingWorkflow.LogicApps.MessagingWorkflowEventLogicAppGenerator
                export interface MessagingWorkflowEventLogicAppGenerator extends Core.WorkflowGeneratorBase$2<Core.WorkflowTemplateBase$1<MessagingWorkflowEventLogicAppModel>, MessagingWorkflowEventLogicAppModel>, Core.IWorkflowFileGenerator, Core.IWFGenerator, Core.IWorkflowGenerator {
                    InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
                }
                export interface MessagingWorkflowEventLogicAppGeneratorTypeFunc extends TypeFunction {
                    (): MessagingWorkflowEventLogicAppGeneratorTypeFunc;
                    prototype: MessagingWorkflowEventLogicAppGenerator;
                    new (abi: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage, contractAddress: string, subscriptionId: string, escapedAbi: string, location: string, topicName: string, messagingType: Core.MessagingType): MessagingWorkflowEventLogicAppGenerator;
                    ctor: { new (abi: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage, contractAddress: string, subscriptionId: string, escapedAbi: string, location: string, topicName: string, messagingType: Core.MessagingType): MessagingWorkflowEventLogicAppGenerator; };
                }
                const MessagingWorkflowEventLogicAppGenerator: MessagingWorkflowEventLogicAppGeneratorTypeFunc;

                // Nethereum.Generators.MessagingWorkflow.LogicApps.MessagingWorkflowEventLogicAppModel
                export interface MessagingWorkflowEventLogicAppModel extends Core.WorkflowTypeMessageModel, Core.IWorkflowModel, Core.IFileModel {
                    get_EventABI(): Model.EventABI;
                    CanGenerateOutputLogicApp(): boolean;
                }
                export interface MessagingWorkflowEventLogicAppModelTypeFunc extends TypeFunction {
                    (): MessagingWorkflowEventLogicAppModelTypeFunc;
                    prototype: MessagingWorkflowEventLogicAppModel;
                    new (eventABI: Model.EventABI, namespace: string): MessagingWorkflowEventLogicAppModel;
                    ctor: { new (eventABI: Model.EventABI, namespace: string): MessagingWorkflowEventLogicAppModel; };
                }
                const MessagingWorkflowEventLogicAppModel: MessagingWorkflowEventLogicAppModelTypeFunc;

                // Nethereum.Generators.MessagingWorkflow.LogicApps.MessagingWorkflowEventLogicAppTemplate
                export interface MessagingWorkflowEventLogicAppTemplate extends Core.WorkflowTemplateBase$1<MessagingWorkflowEventLogicAppModel>, Core.IWorkflowTemplate {
                    GetLogicAppStart(): string;
                    GetBlockchainEventTriggerForLogicApp(escapedAbi: string, contractAddress: string): string;
                    GetEventGridActions(): string;
                    GetServiceBusActions(): string;
                    GetLogicAppEnd(): string;
                }
                export interface MessagingWorkflowEventLogicAppTemplateTypeFunc extends TypeFunction {
                    (): MessagingWorkflowEventLogicAppTemplateTypeFunc;
                    prototype: MessagingWorkflowEventLogicAppTemplate;
                    new (model: MessagingWorkflowEventLogicAppModel, contractAddress: string, escapedAbi: string, subsciptionId: string, location: string, topicName: string, messagingType: Core.MessagingType): MessagingWorkflowEventLogicAppTemplate;
                    ctor: { new (model: MessagingWorkflowEventLogicAppModel, contractAddress: string, escapedAbi: string, subsciptionId: string, location: string, topicName: string, messagingType: Core.MessagingType): MessagingWorkflowEventLogicAppTemplate; };
                }
                const MessagingWorkflowEventLogicAppTemplate: MessagingWorkflowEventLogicAppTemplateTypeFunc;
            }
        }
        module ReportingWorkflow {
            // Nethereum.Generators.ReportingWorkflow.ReportingWorkflowCSharpOutputLogicAppGenerator
            export interface ReportingWorkflowCSharpOutputLogicAppGenerator extends Core.WorkflowGeneratorBase$2<Core.WorkflowTemplateBase$1<ReportingWorkflowEventCSharpLogicAppModel>, ReportingWorkflowEventCSharpLogicAppModel>, Core.IWorkflowFileGenerator, Core.IWFGenerator, Core.IWorkflowGenerator {
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface ReportingWorkflowCSharpOutputLogicAppGeneratorTypeFunc extends TypeFunction {
                (): ReportingWorkflowCSharpOutputLogicAppGeneratorTypeFunc;
                prototype: ReportingWorkflowCSharpOutputLogicAppGenerator;
                new (eventABI: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage, powerbiDatasetId: string, powerbiTable: string): ReportingWorkflowCSharpOutputLogicAppGenerator;
                ctor: { new (eventABI: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage, powerbiDatasetId: string, powerbiTable: string): ReportingWorkflowCSharpOutputLogicAppGenerator; };
            }
            const ReportingWorkflowCSharpOutputLogicAppGenerator: ReportingWorkflowCSharpOutputLogicAppGeneratorTypeFunc;

            // Nethereum.Generators.ReportingWorkflow.ReportingWorkflowEventCSharpLogicAppModel
            export interface ReportingWorkflowEventCSharpLogicAppModel extends Core.WorkflowTypeMessageModel, Core.IWorkflowModel, Core.IFileModel {
                get_EventABI(): Model.EventABI;
                CanGenerateOutputLogicApp(): boolean;
            }
            export interface ReportingWorkflowEventCSharpLogicAppModelTypeFunc extends TypeFunction {
                (): ReportingWorkflowEventCSharpLogicAppModelTypeFunc;
                prototype: ReportingWorkflowEventCSharpLogicAppModel;
                new (eventABI: Model.EventABI, namespace: string): ReportingWorkflowEventCSharpLogicAppModel;
                ctor: { new (eventABI: Model.EventABI, namespace: string): ReportingWorkflowEventCSharpLogicAppModel; };
            }
            const ReportingWorkflowEventCSharpLogicAppModel: ReportingWorkflowEventCSharpLogicAppModelTypeFunc;

            // Nethereum.Generators.ReportingWorkflow.ReportingWorkflowEventLogicAppModel
            export interface ReportingWorkflowEventLogicAppModel extends Core.WorkflowTypeMessageModel, Core.IWorkflowModel, Core.IFileModel {
                get_EventABI(): Model.EventABI;
                CanGenerateOutputLogicApp(): boolean;
            }
            export interface ReportingWorkflowEventLogicAppModelTypeFunc extends TypeFunction {
                (): ReportingWorkflowEventLogicAppModelTypeFunc;
                prototype: ReportingWorkflowEventLogicAppModel;
                new (eventABI: Model.EventABI, namespace: string): ReportingWorkflowEventLogicAppModel;
                ctor: { new (eventABI: Model.EventABI, namespace: string): ReportingWorkflowEventLogicAppModel; };
            }
            const ReportingWorkflowEventLogicAppModel: ReportingWorkflowEventLogicAppModelTypeFunc;

            // Nethereum.Generators.ReportingWorkflow.ReportingWorkflowEventsOutputLogicAppGenerator
            export interface ReportingWorkflowEventsOutputLogicAppGenerator extends Core.WorkflowGeneratorBase$2<Core.WorkflowTemplateBase$1<ReportingWorkflowEventLogicAppModel>, ReportingWorkflowEventLogicAppModel>, Core.IWorkflowFileGenerator, Core.IWFGenerator, Core.IWorkflowGenerator {
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface ReportingWorkflowEventsOutputLogicAppGeneratorTypeFunc extends TypeFunction {
                (): ReportingWorkflowEventsOutputLogicAppGeneratorTypeFunc;
                prototype: ReportingWorkflowEventsOutputLogicAppGenerator;
                new (eventABI: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage, contractAddress: string, subscriptionId: string, escapedAbi: string, location: string, powerbiDatasetId: string, powerbiTable: string): ReportingWorkflowEventsOutputLogicAppGenerator;
                ctor: { new (eventABI: Model.EventABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage, contractAddress: string, subscriptionId: string, escapedAbi: string, location: string, powerbiDatasetId: string, powerbiTable: string): ReportingWorkflowEventsOutputLogicAppGenerator; };
            }
            const ReportingWorkflowEventsOutputLogicAppGenerator: ReportingWorkflowEventsOutputLogicAppGeneratorTypeFunc;

            // Nethereum.Generators.ReportingWorkflow.ReportingWorkflowGenerator
            export interface ReportingWorkflowGenerator extends Core.WorkflowGeneratorBase$2<Core.WorkflowTemplateBase$1<ReportingWorkflowModel>, ReportingWorkflowModel>, Core.IWorkflowFileGenerator, Core.IWFGenerator, Core.IWorkflowGenerator {
                get_ContractABI(): Model.ContractABI;
                InitialiseTemplate(serviceType: Core.ServiceType, codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface ReportingWorkflowGeneratorTypeFunc extends TypeFunction {
                (): ReportingWorkflowGeneratorTypeFunc;
                prototype: ReportingWorkflowGenerator;
                new (contractABI: Model.ContractABI, contractName: string, byteCode: string, serviceType: Core.ServiceType, codeGenLanguage: Core.CodeGenLanguage): ReportingWorkflowGenerator;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string, serviceType: Core.ServiceType, codeGenLanguage: Core.CodeGenLanguage): ReportingWorkflowGenerator; };
            }
            const ReportingWorkflowGenerator: ReportingWorkflowGeneratorTypeFunc;

            // Nethereum.Generators.ReportingWorkflow.ReportingWorkflowModel
            export interface ReportingWorkflowModel extends Core.WorkflowTypeMessageModel, Core.IWorkflowModel, Core.IFileModel {
                get_ContractABI(): Model.ContractABI;
            }
            export interface ReportingWorkflowModelTypeFunc extends TypeFunction {
                (): ReportingWorkflowModelTypeFunc;
                prototype: ReportingWorkflowModel;
                new (contractABI: Model.ContractABI, contractName: string, byteCode: string): ReportingWorkflowModel;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string): ReportingWorkflowModel; };
            }
            const ReportingWorkflowModel: ReportingWorkflowModelTypeFunc;

            // Nethereum.Generators.ReportingWorkflow.ReportingWorkflowProjectGenerator
            export interface ReportingWorkflowProjectGenerator extends System.Object {
                get_ContractABI(): Model.ContractABI;
                get_ContractName(): string;
                get_ByteCode(): string;
                get_BaseNamespace(): string;
                get_ServiceNamespace(): string;
                get_BaseOutputPath(): string;
                get_PathDelimiter(): string;
                get_CodeGenLanguage(): Core.CodeGenLanguage;
                get_ContractAddress(): string;
                get_ServiceType(): Core.ServiceType;
                get_SubscriptionId(): string;
                get_Location(): string;
                get_ContractAbiString(): string;
                GenerateAll(): Core.GeneratedFile[];
                GenerateAllLogicAppFiles(): System.Collections.Generic.List$1<Core.GeneratedFile>;
                GenerateLogicAppFiles(): System.Collections.Generic.List$1<Core.GeneratedFile>;
                GetAllLogicAppGenerators(): System.Collections.Generic.List$1<ReportingWorkflowEventsOutputLogicAppGenerator>;
                GetFullNamespace(namespace: string): string;
                GetFullPath(namespace: string): string;
            }
            export interface ReportingWorkflowProjectGeneratorTypeFunc extends TypeFunction {
                (): ReportingWorkflowProjectGeneratorTypeFunc;
                prototype: ReportingWorkflowProjectGenerator;
                new (contractABI: Model.ContractABI, contractName: string, byteCode: string, baseNamespace: string, serviceNamespace: string, baseOutputPath: string, pathDelimiter: string, serviceType: Core.ServiceType, codeGenLanguage: Core.CodeGenLanguage, contractAddress: string, subscriptionId: string, location: string, contractAbiString: string): ReportingWorkflowProjectGenerator;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string, baseNamespace: string, serviceNamespace: string, baseOutputPath: string, pathDelimiter: string, serviceType: Core.ServiceType, codeGenLanguage: Core.CodeGenLanguage, contractAddress: string, subscriptionId: string, location: string, contractAbiString: string): ReportingWorkflowProjectGenerator; };
            }
            const ReportingWorkflowProjectGenerator: ReportingWorkflowProjectGeneratorTypeFunc;

            // Nethereum.Generators.ReportingWorkflow.ReportingWorkflowTemplate
            export interface ReportingWorkflowTemplate extends Core.WorkflowTemplateBase$1<ReportingWorkflowModel>, Core.IWorkflowTemplate {
            }
            export interface ReportingWorkflowTemplateTypeFunc extends TypeFunction {
                (): ReportingWorkflowTemplateTypeFunc;
                prototype: ReportingWorkflowTemplate;
                new (model: ReportingWorkflowModel): ReportingWorkflowTemplate;
                ctor: { new (model: ReportingWorkflowModel): ReportingWorkflowTemplate; };
            }
            const ReportingWorkflowTemplate: ReportingWorkflowTemplateTypeFunc;
            module LogicApps {
                // Nethereum.Generators.ReportingWorkflow.LogicApps.ReportingWorkflowCSharpOutputLogicAppTemplate
                export interface ReportingWorkflowCSharpOutputLogicAppTemplate extends Core.WorkflowTemplateBase$1<ReportingWorkflowEventCSharpLogicAppModel>, Core.IWorkflowTemplate {
                }
                export interface ReportingWorkflowCSharpOutputLogicAppTemplateTypeFunc extends TypeFunction {
                    (): ReportingWorkflowCSharpOutputLogicAppTemplateTypeFunc;
                    prototype: ReportingWorkflowCSharpOutputLogicAppTemplate;
                    new (model: ReportingWorkflowEventCSharpLogicAppModel, powerbiDatasetId: string, powerbiTable: string): ReportingWorkflowCSharpOutputLogicAppTemplate;
                    ctor: { new (model: ReportingWorkflowEventCSharpLogicAppModel, powerbiDatasetId: string, powerbiTable: string): ReportingWorkflowCSharpOutputLogicAppTemplate; };
                }
                const ReportingWorkflowCSharpOutputLogicAppTemplate: ReportingWorkflowCSharpOutputLogicAppTemplateTypeFunc;

                // Nethereum.Generators.ReportingWorkflow.LogicApps.ReportingWorkflowEventsOutputLogicAppTemplate
                export interface ReportingWorkflowEventsOutputLogicAppTemplate extends Core.WorkflowTemplateBase$1<ReportingWorkflowEventLogicAppModel>, Core.IWorkflowTemplate {
                    GetLogicAppStart(): string;
                    GetBlockchainEventTriggerForLogicApp(escapedAbi: string, contractAddress: string): string;
                    GetActions(): string;
                    GetLogicAppEnd(): string;
                }
                export interface ReportingWorkflowEventsOutputLogicAppTemplateTypeFunc extends TypeFunction {
                    (): ReportingWorkflowEventsOutputLogicAppTemplateTypeFunc;
                    prototype: ReportingWorkflowEventsOutputLogicAppTemplate;
                    new (model: ReportingWorkflowEventLogicAppModel, contractAddress: string, escapedAbi: string, subsciptionId: string, location: string, powerbiDatasetId: string, powerbiTable: string): ReportingWorkflowEventsOutputLogicAppTemplate;
                    ctor: { new (model: ReportingWorkflowEventLogicAppModel, contractAddress: string, escapedAbi: string, subsciptionId: string, location: string, powerbiDatasetId: string, powerbiTable: string): ReportingWorkflowEventsOutputLogicAppTemplate; };
                }
                const ReportingWorkflowEventsOutputLogicAppTemplate: ReportingWorkflowEventsOutputLogicAppTemplateTypeFunc;
            }
        }
        module ServiceWorkflow {
            // Nethereum.Generators.ServiceWorkflow.ServiceWorkflowProjectGenerator
            export interface ServiceWorkflowProjectGenerator extends System.Object {
                get_ContractABI(): Model.ContractABI;
                get_ContractName(): string;
                get_ByteCode(): string;
                get_BaseNamespace(): string;
                get_ServiceNamespace(): string;
                get_BaseOutputPath(): string;
                get_PathDelimiter(): string;
                get_CodeGenLanguage(): Core.CodeGenLanguage;
                get_ABIString(): string;
                get_ContractAddress(): string;
                get_SubscriptionId(): string;
                get_Location(): string;
                get_BlockchainRpcEndpoint(): string;
                get_ServiceType(): Core.ServiceType;
                GenerateServiceWorkflows(): Core.GeneratedFile[];
                GenerateAll(): Core.GeneratedFile[];
                GenerateAllLogicAppFiles(): System.Collections.Generic.List$1<Core.GeneratedFile>;
                GenerateLogicAppFiles(): System.Collections.Generic.List$1<Core.GeneratedFile>;
                GetAllLogicAppGenerators(): System.Collections.Generic.List$1<Core.IWorkflowFileGenerator>;
                GetFullNamespace(namespace: string): string;
                GetFullPath(namespace: string): string;
            }
            export interface ServiceWorkflowProjectGeneratorTypeFunc extends TypeFunction {
                (): ServiceWorkflowProjectGeneratorTypeFunc;
                prototype: ServiceWorkflowProjectGenerator;
                new (contractABI: Model.ContractABI, contractName: string, byteCode: string, baseNamespace: string, serviceNamespace: string, baseOutputPath: string, pathDelimiter: string, serviceType: Core.ServiceType, codeGenLanguage: Core.CodeGenLanguage, abiString: string, contractAddress: string, subscriptionId: string, location: string, blockchainRpcEndpoint: string): ServiceWorkflowProjectGenerator;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, byteCode: string, baseNamespace: string, serviceNamespace: string, baseOutputPath: string, pathDelimiter: string, serviceType: Core.ServiceType, codeGenLanguage: Core.CodeGenLanguage, abiString: string, contractAddress: string, subscriptionId: string, location: string, blockchainRpcEndpoint: string): ServiceWorkflowProjectGenerator; };
            }
            const ServiceWorkflowProjectGenerator: ServiceWorkflowProjectGeneratorTypeFunc;
            module FlowApps {
                // Nethereum.Generators.ServiceWorkflow.FlowApps.ServiceWorkflowFunctionOutputFlowAppGenerator
                export interface ServiceWorkflowFunctionOutputFlowAppGenerator extends Core.WorkflowGeneratorBase$2<Core.WorkflowTemplateBase$1<ServiceWorkflowFunctionOutputFlowAppModel>, ServiceWorkflowFunctionOutputFlowAppModel>, Core.IWorkflowFileGenerator, Core.IWFGenerator, Core.IWorkflowGenerator {
                }
                export interface ServiceWorkflowFunctionOutputFlowAppGeneratorTypeFunc extends TypeFunction {
                    (): ServiceWorkflowFunctionOutputFlowAppGeneratorTypeFunc;
                    prototype: ServiceWorkflowFunctionOutputFlowAppGenerator;
                    new (functionABI: Model.FunctionABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage, escapedAbi: string, contractAddress: string, subscriptionId: string, location: string): ServiceWorkflowFunctionOutputFlowAppGenerator;
                    ctor: { new (functionABI: Model.FunctionABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage, escapedAbi: string, contractAddress: string, subscriptionId: string, location: string): ServiceWorkflowFunctionOutputFlowAppGenerator; };
                }
                const ServiceWorkflowFunctionOutputFlowAppGenerator: ServiceWorkflowFunctionOutputFlowAppGeneratorTypeFunc;

                // Nethereum.Generators.ServiceWorkflow.FlowApps.ServiceWorkflowFunctionOutputFlowAppModel
                export interface ServiceWorkflowFunctionOutputFlowAppModel extends Core.WorkflowTypeMessageModel, Core.IWorkflowModel, Core.IFileModel {
                    get_FunctionABI(): Model.FunctionABI;
                    CanGenerateOutputLogicApp(): boolean;
                }
                export interface ServiceWorkflowFunctionOutputFlowAppModelTypeFunc extends TypeFunction {
                    (): ServiceWorkflowFunctionOutputFlowAppModelTypeFunc;
                    prototype: ServiceWorkflowFunctionOutputFlowAppModel;
                    new (functionABI: Model.FunctionABI, namespace: string): ServiceWorkflowFunctionOutputFlowAppModel;
                    ctor: { new (functionABI: Model.FunctionABI, namespace: string): ServiceWorkflowFunctionOutputFlowAppModel; };
                }
                const ServiceWorkflowFunctionOutputFlowAppModel: ServiceWorkflowFunctionOutputFlowAppModelTypeFunc;

                // Nethereum.Generators.ServiceWorkflow.FlowApps.ServiceWorkflowFunctionOutputFlowAppTemplate
                export interface ServiceWorkflowFunctionOutputFlowAppTemplate extends Core.WorkflowTemplateBase$1<ServiceWorkflowFunctionOutputFlowAppModel>, Core.IWorkflowTemplate {
                    GetConnections(): string;
                    GetLogicAppStart(): string;
                    GetHttpRequestTriggerForLogicApp(): string;
                    GetExecuteFunctionActionForLogicApp(): string;
                    GetHttpResponseActionForLogicApp(): string;
                    GetLogicAppEnd(): string;
                }
                export interface ServiceWorkflowFunctionOutputFlowAppTemplateTypeFunc extends TypeFunction {
                    (): ServiceWorkflowFunctionOutputFlowAppTemplateTypeFunc;
                    prototype: ServiceWorkflowFunctionOutputFlowAppTemplate;
                    new (model: ServiceWorkflowFunctionOutputFlowAppModel, contractAddress: string, escapedAbi: string, subsciptionId: string, location: string): ServiceWorkflowFunctionOutputFlowAppTemplate;
                    ctor: { new (model: ServiceWorkflowFunctionOutputFlowAppModel, contractAddress: string, escapedAbi: string, subsciptionId: string, location: string): ServiceWorkflowFunctionOutputFlowAppTemplate; };
                }
                const ServiceWorkflowFunctionOutputFlowAppTemplate: ServiceWorkflowFunctionOutputFlowAppTemplateTypeFunc;

                // Nethereum.Generators.ServiceWorkflow.FlowApps.ServiceWorkflowParameterABIFunctionFlowAppTemplate
                export interface ServiceWorkflowParameterABIFunctionFlowAppTemplate extends System.Object {
                    GenerateAllProperties(parameters: Model.ParameterABI[]): string;
                    GenerateProperty(parameter: Model.ParameterABI): string;
                }
                export interface ServiceWorkflowParameterABIFunctionFlowAppTemplateTypeFunc extends TypeFunction {
                    (): ServiceWorkflowParameterABIFunctionFlowAppTemplateTypeFunc;
                    prototype: ServiceWorkflowParameterABIFunctionFlowAppTemplate;
                    new (): ServiceWorkflowParameterABIFunctionFlowAppTemplate;
                    ctor: { new (): ServiceWorkflowParameterABIFunctionFlowAppTemplate; };
                }
                const ServiceWorkflowParameterABIFunctionFlowAppTemplate: ServiceWorkflowParameterABIFunctionFlowAppTemplateTypeFunc;
            }
            module Function {
                // Nethereum.Generators.ServiceWorkflow.Function.ServiceWorkflowFunctionOutputFunctionGenerator
                export interface ServiceWorkflowFunctionOutputFunctionGenerator extends Core.WorkflowGeneratorBase$2<Core.WorkflowTemplateBase$1<ServiceWorkflowFunctionOutputFunctionModel>, ServiceWorkflowFunctionOutputFunctionModel>, Core.IWorkflowFileGenerator, Core.IWFGenerator, Core.IWorkflowGenerator {
                }
                export interface ServiceWorkflowFunctionOutputFunctionGeneratorTypeFunc extends TypeFunction {
                    (): ServiceWorkflowFunctionOutputFunctionGeneratorTypeFunc;
                    prototype: ServiceWorkflowFunctionOutputFunctionGenerator;
                    new (functionABI: Model.FunctionABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage): ServiceWorkflowFunctionOutputFunctionGenerator;
                    ctor: { new (functionABI: Model.FunctionABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage): ServiceWorkflowFunctionOutputFunctionGenerator; };
                }
                const ServiceWorkflowFunctionOutputFunctionGenerator: ServiceWorkflowFunctionOutputFunctionGeneratorTypeFunc;

                // Nethereum.Generators.ServiceWorkflow.Function.ServiceWorkflowFunctionOutputFunctionModel
                export interface ServiceWorkflowFunctionOutputFunctionModel extends Core.WorkflowTypeMessageModel, Core.IWorkflowModel, Core.IFileModel {
                    get_FunctionABI(): Model.FunctionABI;
                    CanGenerateOutputLogicApp(): boolean;
                }
                export interface ServiceWorkflowFunctionOutputFunctionModelTypeFunc extends TypeFunction {
                    (): ServiceWorkflowFunctionOutputFunctionModelTypeFunc;
                    prototype: ServiceWorkflowFunctionOutputFunctionModel;
                    new (functionABI: Model.FunctionABI, namespace: string): ServiceWorkflowFunctionOutputFunctionModel;
                    ctor: { new (functionABI: Model.FunctionABI, namespace: string): ServiceWorkflowFunctionOutputFunctionModel; };
                }
                const ServiceWorkflowFunctionOutputFunctionModel: ServiceWorkflowFunctionOutputFunctionModelTypeFunc;

                // Nethereum.Generators.ServiceWorkflow.Function.ServiceWorkflowFunctionOutputFunctionTemplate
                export interface ServiceWorkflowFunctionOutputFunctionTemplate extends Core.WorkflowTemplateBase$1<ServiceWorkflowFunctionOutputFunctionModel>, Core.IWorkflowTemplate {
                }
                export interface ServiceWorkflowFunctionOutputFunctionTemplateTypeFunc extends TypeFunction {
                    (): ServiceWorkflowFunctionOutputFunctionTemplateTypeFunc;
                    prototype: ServiceWorkflowFunctionOutputFunctionTemplate;
                    new (model: ServiceWorkflowFunctionOutputFunctionModel): ServiceWorkflowFunctionOutputFunctionTemplate;
                    ctor: { new (model: ServiceWorkflowFunctionOutputFunctionModel): ServiceWorkflowFunctionOutputFunctionTemplate; };
                }
                const ServiceWorkflowFunctionOutputFunctionTemplate: ServiceWorkflowFunctionOutputFunctionTemplateTypeFunc;
                module Blockchain {
                    // Nethereum.Generators.ServiceWorkflow.Function.Blockchain.ServiceWorkflowFunctionOutputBlockchainFileGenerator
                    export interface ServiceWorkflowFunctionOutputBlockchainFileGenerator extends Core.WorkflowGeneratorBase$2<Core.WorkflowTemplateBase$1<ServiceWorkflowFunctionOutputBlockchainFileModel>, ServiceWorkflowFunctionOutputBlockchainFileModel>, Core.IWorkflowFileGenerator, Core.IWFGenerator, Core.IWorkflowGenerator {
                    }
                    export interface ServiceWorkflowFunctionOutputBlockchainFileGeneratorTypeFunc extends TypeFunction {
                        (): ServiceWorkflowFunctionOutputBlockchainFileGeneratorTypeFunc;
                        prototype: ServiceWorkflowFunctionOutputBlockchainFileGenerator;
                        new (codeGenLanguage: Core.CodeGenLanguage, escapedAbi: string, contractAddress: string, blockchainRpcEndpoint: string): ServiceWorkflowFunctionOutputBlockchainFileGenerator;
                        ctor: { new (codeGenLanguage: Core.CodeGenLanguage, escapedAbi: string, contractAddress: string, blockchainRpcEndpoint: string): ServiceWorkflowFunctionOutputBlockchainFileGenerator; };
                    }
                    const ServiceWorkflowFunctionOutputBlockchainFileGenerator: ServiceWorkflowFunctionOutputBlockchainFileGeneratorTypeFunc;

                    // Nethereum.Generators.ServiceWorkflow.Function.Blockchain.ServiceWorkflowFunctionOutputBlockchainFileModel
                    export interface ServiceWorkflowFunctionOutputBlockchainFileModel extends Core.WorkflowTypeMessageModel, Core.IWorkflowModel, Core.IFileModel {
                        CanGenerateFile(): boolean;
                    }
                    export interface ServiceWorkflowFunctionOutputBlockchainFileModelTypeFunc extends TypeFunction {
                        (): ServiceWorkflowFunctionOutputBlockchainFileModelTypeFunc;
                        prototype: ServiceWorkflowFunctionOutputBlockchainFileModel;
                        new (): ServiceWorkflowFunctionOutputBlockchainFileModel;
                        ctor: { new (): ServiceWorkflowFunctionOutputBlockchainFileModel; };
                    }
                    const ServiceWorkflowFunctionOutputBlockchainFileModel: ServiceWorkflowFunctionOutputBlockchainFileModelTypeFunc;

                    // Nethereum.Generators.ServiceWorkflow.Function.Blockchain.ServiceWorkflowFunctionOutputBlockchainFileTemplate
                    export interface ServiceWorkflowFunctionOutputBlockchainFileTemplate extends Core.WorkflowTemplateBase$1<ServiceWorkflowFunctionOutputBlockchainFileModel>, Core.IWorkflowTemplate {
                    }
                    export interface ServiceWorkflowFunctionOutputBlockchainFileTemplateTypeFunc extends TypeFunction {
                        (): ServiceWorkflowFunctionOutputBlockchainFileTemplateTypeFunc;
                        prototype: ServiceWorkflowFunctionOutputBlockchainFileTemplate;
                        new (model: ServiceWorkflowFunctionOutputBlockchainFileModel, escapedAbi: string, contractAddress: string, blockchainRpcEndpoint: string): ServiceWorkflowFunctionOutputBlockchainFileTemplate;
                        ctor: { new (model: ServiceWorkflowFunctionOutputBlockchainFileModel, escapedAbi: string, contractAddress: string, blockchainRpcEndpoint: string): ServiceWorkflowFunctionOutputBlockchainFileTemplate; };
                    }
                    const ServiceWorkflowFunctionOutputBlockchainFileTemplate: ServiceWorkflowFunctionOutputBlockchainFileTemplateTypeFunc;
                }
                module CSProj {
                    // Nethereum.Generators.ServiceWorkflow.Function.CSProj.ServiceWorkflowFunctionOutputCSProjGenerator
                    export interface ServiceWorkflowFunctionOutputCSProjGenerator extends Core.WorkflowGeneratorBase$2<Core.WorkflowTemplateBase$1<ServiceWorkflowFunctionOutputCSProjModel>, ServiceWorkflowFunctionOutputCSProjModel>, Core.IWorkflowFileGenerator, Core.IWFGenerator, Core.IWorkflowGenerator {
                    }
                    export interface ServiceWorkflowFunctionOutputCSProjGeneratorTypeFunc extends TypeFunction {
                        (): ServiceWorkflowFunctionOutputCSProjGeneratorTypeFunc;
                        prototype: ServiceWorkflowFunctionOutputCSProjGenerator;
                        new (codeGenLanguage: Core.CodeGenLanguage): ServiceWorkflowFunctionOutputCSProjGenerator;
                        ctor: { new (codeGenLanguage: Core.CodeGenLanguage): ServiceWorkflowFunctionOutputCSProjGenerator; };
                    }
                    const ServiceWorkflowFunctionOutputCSProjGenerator: ServiceWorkflowFunctionOutputCSProjGeneratorTypeFunc;

                    // Nethereum.Generators.ServiceWorkflow.Function.CSProj.ServiceWorkflowFunctionOutputCSProjModel
                    export interface ServiceWorkflowFunctionOutputCSProjModel extends Core.WorkflowTypeMessageModel, Core.IWorkflowModel, Core.IFileModel {
                        CanGenerateCSProj(): boolean;
                    }
                    export interface ServiceWorkflowFunctionOutputCSProjModelTypeFunc extends TypeFunction {
                        (): ServiceWorkflowFunctionOutputCSProjModelTypeFunc;
                        prototype: ServiceWorkflowFunctionOutputCSProjModel;
                        new (): ServiceWorkflowFunctionOutputCSProjModel;
                        ctor: { new (): ServiceWorkflowFunctionOutputCSProjModel; };
                    }
                    const ServiceWorkflowFunctionOutputCSProjModel: ServiceWorkflowFunctionOutputCSProjModelTypeFunc;

                    // Nethereum.Generators.ServiceWorkflow.Function.CSProj.ServiceWorkflowFunctionOutputCSProjTemplate
                    export interface ServiceWorkflowFunctionOutputCSProjTemplate extends Core.WorkflowTemplateBase$1<ServiceWorkflowFunctionOutputCSProjModel>, Core.IWorkflowTemplate {
                    }
                    export interface ServiceWorkflowFunctionOutputCSProjTemplateTypeFunc extends TypeFunction {
                        (): ServiceWorkflowFunctionOutputCSProjTemplateTypeFunc;
                        prototype: ServiceWorkflowFunctionOutputCSProjTemplate;
                        new (model: ServiceWorkflowFunctionOutputCSProjModel): ServiceWorkflowFunctionOutputCSProjTemplate;
                        ctor: { new (model: ServiceWorkflowFunctionOutputCSProjModel): ServiceWorkflowFunctionOutputCSProjTemplate; };
                    }
                    const ServiceWorkflowFunctionOutputCSProjTemplate: ServiceWorkflowFunctionOutputCSProjTemplateTypeFunc;
                }
                module Host {
                    // Nethereum.Generators.ServiceWorkflow.Function.Host.ServiceWorkflowFunctionOutputHostFileGenerator
                    export interface ServiceWorkflowFunctionOutputHostFileGenerator extends Core.WorkflowGeneratorBase$2<Core.WorkflowTemplateBase$1<ServiceWorkflowFunctionOutputHostFileModel>, ServiceWorkflowFunctionOutputHostFileModel>, Core.IWorkflowFileGenerator, Core.IWFGenerator, Core.IWorkflowGenerator {
                    }
                    export interface ServiceWorkflowFunctionOutputHostFileGeneratorTypeFunc extends TypeFunction {
                        (): ServiceWorkflowFunctionOutputHostFileGeneratorTypeFunc;
                        prototype: ServiceWorkflowFunctionOutputHostFileGenerator;
                        new (codeGenLanguage: Core.CodeGenLanguage): ServiceWorkflowFunctionOutputHostFileGenerator;
                        ctor: { new (codeGenLanguage: Core.CodeGenLanguage): ServiceWorkflowFunctionOutputHostFileGenerator; };
                    }
                    const ServiceWorkflowFunctionOutputHostFileGenerator: ServiceWorkflowFunctionOutputHostFileGeneratorTypeFunc;

                    // Nethereum.Generators.ServiceWorkflow.Function.Host.ServiceWorkflowFunctionOutputHostFileModel
                    export interface ServiceWorkflowFunctionOutputHostFileModel extends Core.WorkflowTypeMessageModel, Core.IWorkflowModel, Core.IFileModel {
                        CanGenerateFile(): boolean;
                    }
                    export interface ServiceWorkflowFunctionOutputHostFileModelTypeFunc extends TypeFunction {
                        (): ServiceWorkflowFunctionOutputHostFileModelTypeFunc;
                        prototype: ServiceWorkflowFunctionOutputHostFileModel;
                        new (): ServiceWorkflowFunctionOutputHostFileModel;
                        ctor: { new (): ServiceWorkflowFunctionOutputHostFileModel; };
                    }
                    const ServiceWorkflowFunctionOutputHostFileModel: ServiceWorkflowFunctionOutputHostFileModelTypeFunc;

                    // Nethereum.Generators.ServiceWorkflow.Function.Host.ServiceWorkflowFunctionOutputHostFileTemplate
                    export interface ServiceWorkflowFunctionOutputHostFileTemplate extends Core.WorkflowTemplateBase$1<ServiceWorkflowFunctionOutputHostFileModel>, Core.IWorkflowTemplate {
                    }
                    export interface ServiceWorkflowFunctionOutputHostFileTemplateTypeFunc extends TypeFunction {
                        (): ServiceWorkflowFunctionOutputHostFileTemplateTypeFunc;
                        prototype: ServiceWorkflowFunctionOutputHostFileTemplate;
                        new (model: ServiceWorkflowFunctionOutputHostFileModel): ServiceWorkflowFunctionOutputHostFileTemplate;
                        ctor: { new (model: ServiceWorkflowFunctionOutputHostFileModel): ServiceWorkflowFunctionOutputHostFileTemplate; };
                    }
                    const ServiceWorkflowFunctionOutputHostFileTemplate: ServiceWorkflowFunctionOutputHostFileTemplateTypeFunc;
                }
            }
            module LogicApps {
                // Nethereum.Generators.ServiceWorkflow.LogicApps.ServiceWorkflowFunctionOutputLogicAppGenerator
                export interface ServiceWorkflowFunctionOutputLogicAppGenerator extends Core.WorkflowGeneratorBase$2<Core.WorkflowTemplateBase$1<ServiceWorkflowFunctionOutputLogicAppModel>, ServiceWorkflowFunctionOutputLogicAppModel>, Core.IWorkflowFileGenerator, Core.IWFGenerator, Core.IWorkflowGenerator {
                }
                export interface ServiceWorkflowFunctionOutputLogicAppGeneratorTypeFunc extends TypeFunction {
                    (): ServiceWorkflowFunctionOutputLogicAppGeneratorTypeFunc;
                    prototype: ServiceWorkflowFunctionOutputLogicAppGenerator;
                    new (functionABI: Model.FunctionABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage, escapedAbi: string, contractAddress: string, subscriptionId: string, location: string): ServiceWorkflowFunctionOutputLogicAppGenerator;
                    ctor: { new (functionABI: Model.FunctionABI, namespace: string, codeGenLanguage: Core.CodeGenLanguage, escapedAbi: string, contractAddress: string, subscriptionId: string, location: string): ServiceWorkflowFunctionOutputLogicAppGenerator; };
                }
                const ServiceWorkflowFunctionOutputLogicAppGenerator: ServiceWorkflowFunctionOutputLogicAppGeneratorTypeFunc;

                // Nethereum.Generators.ServiceWorkflow.LogicApps.ServiceWorkflowFunctionOutputLogicAppModel
                export interface ServiceWorkflowFunctionOutputLogicAppModel extends Core.WorkflowTypeMessageModel, Core.IWorkflowModel, Core.IFileModel {
                    get_FunctionABI(): Model.FunctionABI;
                    CanGenerateOutputLogicApp(): boolean;
                }
                export interface ServiceWorkflowFunctionOutputLogicAppModelTypeFunc extends TypeFunction {
                    (): ServiceWorkflowFunctionOutputLogicAppModelTypeFunc;
                    prototype: ServiceWorkflowFunctionOutputLogicAppModel;
                    new (functionABI: Model.FunctionABI, namespace: string): ServiceWorkflowFunctionOutputLogicAppModel;
                    ctor: { new (functionABI: Model.FunctionABI, namespace: string): ServiceWorkflowFunctionOutputLogicAppModel; };
                }
                const ServiceWorkflowFunctionOutputLogicAppModel: ServiceWorkflowFunctionOutputLogicAppModelTypeFunc;

                // Nethereum.Generators.ServiceWorkflow.LogicApps.ServiceWorkflowFunctionOutputLogicAppTemplate
                export interface ServiceWorkflowFunctionOutputLogicAppTemplate extends Core.WorkflowTemplateBase$1<ServiceWorkflowFunctionOutputLogicAppModel>, Core.IWorkflowTemplate {
                    GetLogicAppStart(): string;
                    GetHttpRequestTriggerForLogicApp(): string;
                    GetExecuteFunctionActionForLogicApp(): string;
                    GetHttpResponseActionForLogicApp(): string;
                    GetLogicAppEnd(): string;
                }
                export interface ServiceWorkflowFunctionOutputLogicAppTemplateTypeFunc extends TypeFunction {
                    (): ServiceWorkflowFunctionOutputLogicAppTemplateTypeFunc;
                    prototype: ServiceWorkflowFunctionOutputLogicAppTemplate;
                    new (model: ServiceWorkflowFunctionOutputLogicAppModel, contractAddress: string, escapedAbi: string, subsciptionId: string, location: string): ServiceWorkflowFunctionOutputLogicAppTemplate;
                    ctor: { new (model: ServiceWorkflowFunctionOutputLogicAppModel, contractAddress: string, escapedAbi: string, subsciptionId: string, location: string): ServiceWorkflowFunctionOutputLogicAppTemplate; };
                }
                const ServiceWorkflowFunctionOutputLogicAppTemplate: ServiceWorkflowFunctionOutputLogicAppTemplateTypeFunc;

                // Nethereum.Generators.ServiceWorkflow.LogicApps.ServiceWorkflowParameterABIFunctionLogicAppTemplate
                export interface ServiceWorkflowParameterABIFunctionLogicAppTemplate extends System.Object {
                    GenerateAllProperties(parameters: Model.ParameterABI[]): string;
                    GenerateProperty(parameter: Model.ParameterABI): string;
                }
                export interface ServiceWorkflowParameterABIFunctionLogicAppTemplateTypeFunc extends TypeFunction {
                    (): ServiceWorkflowParameterABIFunctionLogicAppTemplateTypeFunc;
                    prototype: ServiceWorkflowParameterABIFunctionLogicAppTemplate;
                    new (): ServiceWorkflowParameterABIFunctionLogicAppTemplate;
                    ctor: { new (): ServiceWorkflowParameterABIFunctionLogicAppTemplate; };
                }
                const ServiceWorkflowParameterABIFunctionLogicAppTemplate: ServiceWorkflowParameterABIFunctionLogicAppTemplateTypeFunc;
            }
        }
        module XUnit {
            // Nethereum.Generators.XUnit.SimpleTestGenerator
            export interface SimpleTestGenerator extends Core.ClassGeneratorBase$2<CQS.ClassTemplateBase$1<SimpleTestModel>, SimpleTestModel>, Core.IFileGenerator, Core.IGenerator, Core.IClassGenerator {
                get_ContractABI(): Model.ContractABI;
                InitialiseTemplate(codeGenLanguage: Core.CodeGenLanguage): void;
            }
            export interface SimpleTestGeneratorTypeFunc extends TypeFunction {
                (): SimpleTestGeneratorTypeFunc;
                prototype: SimpleTestGenerator;
                new (contractABI: Model.ContractABI, contractName: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string, codeGenLanguage: Core.CodeGenLanguage): SimpleTestGenerator;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string, codeGenLanguage: Core.CodeGenLanguage): SimpleTestGenerator; };
            }
            const SimpleTestGenerator: SimpleTestGeneratorTypeFunc;

            // Nethereum.Generators.XUnit.SimpleTestModel
            export interface SimpleTestModel extends Core.TypeMessageModel, Core.IClassModel, Core.IFileModel {
                get_ContractABI(): Model.ContractABI;
                get_CQSNamespace(): string;
                get_FunctionOutputNamespace(): string;
            }
            export interface SimpleTestModelTypeFunc extends TypeFunction {
                (): SimpleTestModelTypeFunc;
                prototype: SimpleTestModel;
                new (contractABI: Model.ContractABI, contractName: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string): SimpleTestModel;
                ctor: { new (contractABI: Model.ContractABI, contractName: string, namespace: string, cqsNamespace: string, functionOutputNamespace: string): SimpleTestModel; };
            }
            const SimpleTestModel: SimpleTestModelTypeFunc;

            // Nethereum.Generators.XUnit.SimpleTestCSharpTemplate
            export interface SimpleTestCSharpTemplate extends CQS.ClassTemplateBase$1<SimpleTestModel>, Core.IClassTemplate {
            }
            export interface SimpleTestCSharpTemplateTypeFunc extends TypeFunction {
                (): SimpleTestCSharpTemplateTypeFunc;
                prototype: SimpleTestCSharpTemplate;
                new (model: SimpleTestModel): SimpleTestCSharpTemplate;
                ctor: { new (model: SimpleTestModel): SimpleTestCSharpTemplate; };
            }
            const SimpleTestCSharpTemplate: SimpleTestCSharpTemplateTypeFunc;
        }
    }
}
